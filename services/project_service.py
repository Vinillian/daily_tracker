from pathlib import Path
from typing import List, Dict, Optional
from core.exceptions import ProjectNotFoundError, DataValidationError, FileOperationError
from core.constants import PROJECTS_DIR, PROJECT_TEMPLATES_DIR
from core.validators import Validators
from models.projects import Project, ProjectMetadata, ProjectSection, ProjectTask, ProjectOverall
from services.file_service import file_service


class ProjectService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏"""

    def __init__(self):
        self.data_dir = PROJECTS_DIR
        self.template_dir = PROJECT_TEMPLATES_DIR
        file_service.ensure_dir(self.data_dir)

    def load_project(self, project_name: str) -> Project:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∏–º–µ–Ω–∏"""
        project_file = self.data_dir / f"{project_name}.json"

        if not project_file.exists():
            raise ProjectNotFoundError(f"–ü—Ä–æ–µ–∫—Ç {project_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        try:
            data = file_service.load_json(project_file)
            return self._migrate_old_format(data, project_name)
        except Exception as e:
            raise FileOperationError(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ {project_name}: {e}")

    def save_project(self, project_name: str, project_data: Project) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            Validators.validate_filename(project_name)
            project_file = self.data_dir / f"{project_name}.json"
            file_service.save_json(project_file, project_data.dict(by_alias=True))
        except DataValidationError:
            raise
        except Exception as e:
            raise FileOperationError(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ {project_name}: {e}")

    def create_project(self, project_name: str, template_name: Optional[str] = None) -> Project:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            Validators.validate_filename(project_name)

            if template_name:
                return self._create_from_template(project_name, template_name)
            else:
                return self._create_empty_project(project_name)

        except DataValidationError:
            raise
        except Exception as e:
            raise FileOperationError(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ {project_name}: {e}")

    def project_exists(self, project_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
        project_file = self.data_dir / f"{project_name}.json"
        return project_file.exists()

    def list_projects(self) -> List[str]:
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        files = file_service.list_files(self.data_dir, "*.json")
        return sorted([f.stem for f in files], reverse=True)

    def delete_project(self, project_name: str) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            project_file = self.data_dir / f"{project_name}.json"
            if project_file.exists():
                project_file.unlink()
        except Exception as e:
            raise FileOperationError(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ {project_name}: {e}")

    def _create_from_template(self, project_name: str, template_name: str) -> Project:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞"""
        template_file = self.template_dir / f"{template_name}.json"

        if not template_file.exists():
            raise FileOperationError(f"–®–∞–±–ª–æ–Ω –ø—Ä–æ–µ–∫—Ç–∞ {template_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        template_data = file_service.load_json(template_file)
        migrated_data = self._migrate_old_format(template_data, project_name)

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        migrated_data.metadata.–Ω–∞–∑–≤–∞–Ω–∏–µ = project_name
        return migrated_data

    def _create_empty_project(self, project_name: str) -> Project:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
        return Project(
            metadata=ProjectMetadata(
                –Ω–∞–∑–≤–∞–Ω–∏–µ=project_name,
                –≤–µ—Ä—Å–∏—è="v1.0.0",
                –¥–∞—Ç–∞="{{–¥–∞—Ç–∞}}",
                –æ–ø–∏—Å–∞–Ω–∏–µ="–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç"
            ),
            sections=[
                ProjectSection(
                    –Ω–∞–∑–≤–∞–Ω–∏–µ="üìã –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
                    –∑–∞–¥–∞—á–∏=[
                        ProjectTask(–Ω–∞–∑–≤–∞–Ω–∏–µ="–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π", –ø—Ä–æ–≥—Ä–µ—Å—Å=0),
                        ProjectTask(–Ω–∞–∑–≤–∞–Ω–∏–µ="–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã", –ø—Ä–æ–≥—Ä–µ—Å—Å=0)
                    ]
                )
            ],
            overall=ProjectOverall(
                GLOBAL_PROGRESS=0,
                STABILITY_INDEX=0,
                PERFORMANCE_BOOST=0,
                MOBILE_READY=False,
                WEB_MODE="‚ùå Not supported"
            )
        )

    def _migrate_old_format(self, data: Dict, project_name: str) -> Project:
        """–ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å sections
            if "sections" in data or "sections" in data.get("metadata", {}):
                return Project(**data)

            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø–ª–æ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            migrated_data = {
                "metadata": data.get("metadata", {
                    "–Ω–∞–∑–≤–∞–Ω–∏–µ": project_name,
                    "–≤–µ—Ä—Å–∏—è": "v1.0.0",
                    "–¥–∞—Ç–∞": "{{–¥–∞—Ç–∞}}",
                    "–æ–ø–∏—Å–∞–Ω–∏–µ": data.get("metadata", {}).get("–æ–ø–∏—Å–∞–Ω–∏–µ", "")
                }),
                "sections": [],
                "overall": data.get("overall", {})
            }

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–æ—Å–∫–∏–µ —Å–µ–∫—Ü–∏–∏ –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
            for key, value in data.items():
                if key not in ["metadata", "overall"] and isinstance(value, dict):
                    tasks = []
                    for task_name, progress in value.items():
                        if isinstance(progress, (int, float)):
                            tasks.append(ProjectTask(–Ω–∞–∑–≤–∞–Ω–∏–µ=task_name, –ø—Ä–æ–≥—Ä–µ—Å—Å=progress))

                    if tasks:
                        migrated_data["sections"].append(
                            ProjectSection(–Ω–∞–∑–≤–∞–Ω–∏–µ=key, –∑–∞–¥–∞—á–∏=tasks)
                        )

            return Project(**migrated_data)

        except Exception as e:
            raise DataValidationError(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞ {project_name}: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
project_service = ProjectService()