from pathlib import Path
from typing import List, Dict, Optional
from datetime import date, timedelta
from core.exceptions import DayNotFoundError, DataValidationError, FileOperationError
from core.constants import DIARY_DIR, TEMPLATE_DIR
from core.validators import Validators
from models.diary import Day, Task, DayState
from services.file_service import file_service


class DiaryService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–Ω—è–º–∏"""

    def __init__(self):
        self.data_dir = DIARY_DIR
        self.template_dir = TEMPLATE_DIR
        file_service.ensure_dir(self.data_dir)

    def load_day(self, day_date: str) -> Day:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–Ω—è –ø–æ –¥–∞—Ç–µ"""
        day_file = self.data_dir / f"{day_date}.json"

        if not day_file.exists():
            raise DayNotFoundError(f"–î–µ–Ω—å {day_date} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        try:
            data = file_service.load_json(day_file)
            return self._migrate_old_format(data, day_date)
        except Exception as e:
            raise FileOperationError(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–Ω—è {day_date}: {e}")

    def save_day(self, day_date: str, day_data: Day) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–Ω—è"""
        try:
            Validators.validate_date_format(day_date)
            day_file = self.data_dir / f"{day_date}.json"
            file_service.save_json(day_file, day_data.dict(by_alias=True))
        except DataValidationError:
            raise
        except Exception as e:
            raise FileOperationError(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–Ω—è {day_date}: {e}")

    def create_day(self, day_date: str, template_name: Optional[str] = None) -> Day:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–Ω—è"""
        try:
            Validators.validate_date_format(day_date)

            if template_name:
                return self._create_from_template(day_date, template_name)
            else:
                return Day()

        except DataValidationError:
            raise
        except Exception as e:
            raise FileOperationError(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–Ω—è {day_date}: {e}")

    def day_exists(self, day_date: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–Ω—è"""
        day_file = self.data_dir / f"{day_date}.json"
        return day_file.exists()

    def list_days(self) -> List[str]:
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–Ω–µ–π"""
        files = file_service.list_files(self.data_dir, "*.json")
        return sorted([f.stem for f in files], reverse=True)

    def copy_day(self, source_date: str, target_date: str) -> None:
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω—è"""
        try:
            source_day = self.load_day(source_date)

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —É –∑–∞–¥–∞—á
            for period in [source_day.—É—Ç—Ä–æ, source_day.–¥–µ–Ω—å, source_day.–≤–µ—á–µ—Ä]:
                for task in period:
                    task.–ø—Ä–æ–≥—Ä–µ—Å—Å = 0
                    task.—Å—Ç–∞—Ç—É—Å = "‚òê"

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–º–µ—Ç–∫–∏
            source_day.—Å–æ—Å—Ç–æ—è–Ω–∏–µ = DayState()
            source_day.–∑–∞–º–µ—Ç–∫–∏ = []

            self.save_day(target_date, source_day)

        except Exception as e:
            raise FileOperationError(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–Ω—è: {e}")

    def _create_from_template(self, day_date: str, template_name: str) -> Day:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–Ω—è –∏–∑ —à–∞–±–ª–æ–Ω–∞"""
        template_file = self.template_dir / f"{template_name}.json"

        if not template_file.exists():
            raise FileOperationError(f"–®–∞–±–ª–æ–Ω {template_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        template_data = file_service.load_json(template_file)
        return self._migrate_old_format(template_data, day_date)

    def _migrate_old_format(self, data: Dict, day_date: str) -> Day:
        """–ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
            migrated_data = {
                "–£—Ç—Ä–æ": data.get("–£—Ç—Ä–æ", []),
                "–î–µ–Ω—å": data.get("–î–µ–Ω—å", []),
                "–í–µ—á–µ—Ä": data.get("–í–µ—á–µ—Ä", []),
                "–°–æ—Å—Ç–æ—è–Ω–∏–µ": data.get("–°–æ—Å—Ç–æ—è–Ω–∏–µ", {}),
                "–ó–∞–º–µ—Ç–∫–∏": data.get("–ó–∞–º–µ—Ç–∫–∏", [])
            }

            # –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫ —Å—Ç–∞—Ä—ã–º –∑–∞–¥–∞—á–∞–º
            for period in ["–£—Ç—Ä–æ", "–î–µ–Ω—å", "–í–µ—á–µ—Ä"]:
                if period in migrated_data and isinstance(migrated_data[period], list):
                    for task_data in migrated_data[period]:
                        if isinstance(task_data, dict) and "–∫–∞—Ç–µ–≥–æ—Ä–∏—è" not in task_data:
                            task_data["–∫–∞—Ç–µ–≥–æ—Ä–∏—è"] = self._suggest_category(task_data.get("–∑–∞–¥–∞—á–∞", ""))

            return Day(**migrated_data)

        except Exception as e:
            raise DataValidationError(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–Ω—è {day_date}: {e}")

    def _suggest_category(self, task_text: str) -> str:
        """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —Ç–µ–∫—Å—Ç—É –∑–∞–¥–∞—á–∏"""
        from core.constants import AUTO_CATEGORIES

        if not task_text:
            return "üè† –ë—ã—Ç"

        task_lower = task_text.lower()

        for cat_name, keywords in AUTO_CATEGORIES.items():
            if any(keyword in task_lower for keyword in keywords):
                return cat_name

        return "üè† –ë—ã—Ç"


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
diary_service = DiaryService()