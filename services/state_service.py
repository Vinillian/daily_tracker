from pathlib import Path
from typing import List, Dict, Optional
import yaml
from core.exceptions import FileOperationError
from models.state import StateCategory



class StateService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""

    def __init__(self):
        self.config_dir = Path("config")
        self.default_categories_file = self.config_dir / "state_categories.yaml"
        self.user_categories_file = self.config_dir / "user_state_categories.yaml"
        self.additional_categories_file = self.config_dir / "additional_categories.yaml"  # –ù–û–í–û–ï
        self._ensure_config_dir()

    def _ensure_config_dir(self) -> None:
        """–°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        try:
            self.config_dir.mkdir(exist_ok=True)
            self._create_default_categories()
        except Exception as e:
            raise FileOperationError(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

    def load_additional_categories(self) -> List[StateCategory]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        if not self.additional_categories_file.exists():
            self._create_additional_categories()

        try:
            with open(self.additional_categories_file, 'r', encoding='utf-8') as f:
                additional_data = yaml.safe_load(f) or {}
                additional_categories = additional_data.get('categories', [])
                return [StateCategory(**cat) for cat in additional_categories]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            return []

    def _create_additional_categories(self) -> None:
        """–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
        try:
            self.additional_categories_file.parent.mkdir(parents=True, exist_ok=True)

            additional_categories = [
                {
                    "name": "üçΩÔ∏è –ü–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ",
                    "type": "text",
                    "emoji": "üçΩÔ∏è",
                    "color": "#00B894",
                    "description": "–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏—â–µ–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã",
                    "order": 7
                },
                {
                    "name": "üíä –§–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ",
                    "type": "percent",
                    "emoji": "üíä",
                    "color": "#FD79A8",
                    "description": "–û–±—â–µ–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ",
                    "order": 8
                },
                # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ additional_categories.yaml
                {
                    "name": "‚ö° –ü–∏–∫–æ–≤–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
                    "type": "yes_no",
                    "emoji": "‚ö°",
                    "color": "#FED330",
                    "description": "–ë—ã–ª–∏ –ª–∏ –≤—ã —Å–µ–≥–æ–¥–Ω—è –Ω–∞ –ø–∏–∫–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?",
                    "order": 20
                }
            ]

            with open(self.additional_categories_file, 'w', encoding='utf-8') as f:
                yaml.dump({"categories": additional_categories}, f, allow_unicode=True, indent=2)
        except Exception as e:
            raise FileOperationError(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")

    def _create_default_categories(self) -> None:
        """–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        if not self.default_categories_file.exists():
            try:
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                self.default_categories_file.parent.mkdir(parents=True, exist_ok=True)

                default_categories = [
                    {
                        "name": "üí™ –£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏",
                        "type": "percent",
                        "emoji": "üí™",
                        "color": "#FF6B6B",
                        "description": "–§–∏–∑–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è –∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ç–æ–Ω—É—Å",
                        "order": 1
                    },
                    {
                        "name": "üß† –ú–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è",
                        "type": "scale_1_10",
                        "emoji": "üß†",
                        "color": "#4ECDC4",
                        "description": "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –∏ —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–µ",
                        "order": 2
                    },
                    {
                        "name": "üòå –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
                        "type": "scale_1_10",
                        "emoji": "üòå",
                        "color": "#FFD93D",
                        "description": "–û–±—â–µ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
                        "order": 3
                    },
                    {
                        "name": "üõå –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞",
                        "type": "scale_1_10",
                        "emoji": "üõå",
                        "color": "#6C5CE7",
                        "description": "–ù–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –≤—ã —Å–ø–∞–ª–∏ –ø—Ä–æ—à–ª–æ–π –Ω–æ—á—å—é",
                        "order": 4
                    },
                    {
                        "name": "üçΩÔ∏è –ü–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ",
                        "type": "text",
                        "emoji": "üçΩÔ∏è",
                        "color": "#00B894",
                        "description": "–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏—â–µ–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã",
                        "order": 5
                    },
                    {
                        "name": "üíä –§–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ",
                        "type": "percent",
                        "emoji": "üíä",
                        "color": "#FD79A8",
                        "description": "–û–±—â–µ–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ",
                        "order": 6
                    },
                    {
                        "name": "üßò –£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞",
                        "type": "scale_1_10",
                        "emoji": "üßò",
                        "color": "#E17055",
                        "description": "–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è",
                        "order": 7
                    },
                    {
                        "name": "üí≠ –ú–µ–Ω—Ç–∞–ª—å–Ω–∞—è —è—Å–Ω–æ—Å—Ç—å",
                        "type": "scale_1_10",
                        "emoji": "üí≠",
                        "color": "#74B9FF",
                        "description": "–Ø—Å–Ω–æ—Å—Ç—å –º—ã—à–ª–µ–Ω–∏—è –∏ —É–º—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Å—Ç—Ä–æ—Ç–∞",
                        "order": 8
                    },
                    {
                        "name": "üèÉ –§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                        "type": "percent",
                        "emoji": "üèÉ",
                        "color": "#55E6C1",
                        "description": "–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π",
                        "order": 9
                    },
                    {
                        "name": "üçé –ü–∏—Ç–∞–Ω–∏–µ",
                        "type": "scale_1_10",
                        "emoji": "üçé",
                        "color": "#FF9FF3",
                        "description": "–ö–∞—á–µ—Å—Ç–≤–æ –ø–∏—Ç–∞–Ω–∏—è –∏ –ø–∏—â–µ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫",
                        "order": 10
                    },
                    {
                        "name": "üíß –ì–∏–¥—Ä–∞—Ç–∞—Ü–∏—è",
                        "type": "percent",
                        "emoji": "üíß",
                        "color": "#3867D6",
                        "description": "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã –∏ —É—Ä–æ–≤–µ–Ω—å –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏",
                        "order": 11
                    },
                    {
                        "name": "üåû –£—Ç—Ä–µ–Ω–Ω—è—è —ç–Ω–µ—Ä–≥–∏—è",
                        "type": "percent",
                        "emoji": "üåû",
                        "color": "#FDCB6E",
                        "description": "–£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ –ø—Ä–∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–∏",
                        "order": 12
                    },
                    {
                        "name": "üåô –í–µ—á–µ—Ä–Ω—è—è —ç–Ω–µ—Ä–≥–∏—è",
                        "type": "percent",
                        "emoji": "üåô",
                        "color": "#A29BFE",
                        "description": "–£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ –≤–µ—á–µ—Ä–æ–º",
                        "order": 13
                    },
                    {
                        "name": "üìö –§–æ–∫—É—Å –Ω–∞ –æ–±—É—á–µ–Ω–∏–∏",
                        "type": "scale_1_10",
                        "emoji": "üìö",
                        "color": "#00CEC9",
                        "description": "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —É—á–µ–±–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö",
                        "order": 14
                    },
                    {
                        "name": "üíº –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                        "type": "percent",
                        "emoji": "üíº",
                        "color": "#636E72",
                        "description": "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç–µ/—É—á–µ–±–µ",
                        "order": 15
                    },
                    {
                        "name": "üë• –°–æ—Ü–∏–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è",
                        "type": "scale_1_10",
                        "emoji": "üë•",
                        "color": "#F8A5C2",
                        "description": "–≠–Ω–µ—Ä–≥–∏—è –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π",
                        "order": 16
                    },
                    {
                        "name": "üéØ –ú–æ—Ç–∏–≤–∞—Ü–∏—è",
                        "type": "scale_1_10",
                        "emoji": "üéØ",
                        "color": "#546DE5",
                        "description": "–û–±—â–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –∏ –¥—Ä–∞–π–≤",
                        "order": 17
                    },
                    {
                        "name": "üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ",
                        "type": "percent",
                        "emoji": "üîÑ",
                        "color": "#C44569",
                        "description": "–£—Ä–æ–≤–µ–Ω—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–ª–∞ –∏ —É–º–∞",
                        "order": 18
                    },
                    {
                        "name": "üåø –û–±—â–µ–µ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ",
                        "type": "scale_1_10",
                        "emoji": "üåø",
                        "color": "#26DE81",
                        "description": "–û–±—â–µ–µ –æ—â—É—â–µ–Ω–∏–µ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è",
                        "order": 19
                    },
                    {
                        "name": "‚ö° –ü–∏–∫–æ–≤–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
                        "type": "yes_no",
                        "emoji": "‚ö°",
                        "color": "#FED330",
                        "description": "–ë—ã–ª–∏ –ª–∏ –≤—ã —Å–µ–≥–æ–¥–Ω—è –Ω–∞ –ø–∏–∫–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?",
                        "order": 20
                    }
                ]

                with open(self.default_categories_file, 'w', encoding='utf-8') as f:
                    yaml.dump({"categories": default_categories}, f, allow_unicode=True, indent=2)
            except Exception as e:
                raise FileOperationError(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")

    def load_categories(self) -> List[StateCategory]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ, –ø–æ—Ç–æ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ)"""
        categories = []

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.user_categories_file.exists():
            try:
                with open(self.user_categories_file, 'r', encoding='utf-8') as f:
                    user_data = yaml.safe_load(f) or {}
                    user_categories = user_data.get('categories', [])
                    categories.extend([StateCategory(**cat) for cat in user_categories])
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        try:
            with open(self.default_categories_file, 'r', encoding='utf-8') as f:
                default_data = yaml.safe_load(f) or {}
                default_categories = default_data.get('categories', [])

                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_category_names = {cat.name for cat in categories}
                for cat_data in default_categories:
                    if cat_data['name'] not in user_category_names:
                        categories.append(StateCategory(**cat_data))

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É
        return sorted(categories, key=lambda x: x.order)

    def add_category(self, category: StateCategory) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            categories = self.load_categories()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
            if any(cat.name == category.name for cat in categories):
                raise ValueError(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å –∏–º–µ–Ω–µ–º '{category.name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

            categories.append(category)
            self.save_user_categories(categories)

        except Exception as e:
            raise FileOperationError(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")

    def update_category(self, category_name: str, updated_category: StateCategory) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            categories = self.load_categories()

            for i, cat in enumerate(categories):
                if cat.name == category_name:
                    categories[i] = updated_category
                    self.save_user_categories(categories)
                    return

            raise ValueError(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        except Exception as e:
            raise FileOperationError(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")

    def delete_category(self, category_name: str) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            categories = self.load_categories()

            # –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º —É–¥–∞–ª—è—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            default_categories = self._load_default_categories()
            default_names = {cat.name for cat in default_categories}

            if category_name in default_names:
                raise ValueError("–ù–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

            # –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            categories = [cat for cat in categories if cat.name != category_name]
            self.save_user_categories(categories)

        except Exception as e:
            raise FileOperationError(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")

    def reorder_categories(self, new_order: List[str]) -> None:
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        try:
            categories = self.load_categories()
            category_dict = {cat.name: cat for cat in categories}

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            reordered_categories = []
            for name in new_order:
                if name in category_dict:
                    reordered_categories.append(category_dict[name])

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            for cat in categories:
                if cat.name not in new_order:
                    reordered_categories.append(cat)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫
            for i, cat in enumerate(reordered_categories):
                cat.order = i + 1

            self.save_user_categories(reordered_categories)

        except Exception as e:
            raise FileOperationError(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")

    def _load_default_categories(self) -> List[StateCategory]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ª—å–∫–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        try:
            with open(self.default_categories_file, 'r', encoding='utf-8') as f:
                default_data = yaml.safe_load(f) or {}
                default_categories = default_data.get('categories', [])
                return [StateCategory(**cat) for cat in default_categories]
        except Exception:
            return []

    def save_user_categories(self, categories: List[StateCategory]) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º dict() –≤–º–µ—Å—Ç–æ model_dump –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            data = {"categories": [cat.dict() for cat in categories]}
            with open(self.user_categories_file, 'w', encoding='utf-8') as f:
                yaml.dump(data, f, allow_unicode=True, indent=2)
        except Exception as e:
            raise FileOperationError(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")

    @staticmethod
    def get_category_types() -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        return ["percent", "scale_1_10", "text", "yes_no"]


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
state_service = StateService()