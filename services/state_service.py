from pathlib import Path
from typing import List, Dict, Optional
import yaml
from core.exceptions import FileOperationError
from models.state import StateCategory



class StateService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""

    def __init__(self):
        self.config_dir = Path("config")
        self.default_categories_file = self.config_dir / "state_categories.yaml"
        self.user_categories_file = self.config_dir / "user_state_categories.yaml"
        self._ensure_config_dir()

    def _ensure_config_dir(self) -> None:
        """–°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        try:
            self.config_dir.mkdir(exist_ok=True)
            self._create_default_categories()
        except Exception as e:
            raise FileOperationError(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

    def _create_default_categories(self) -> None:
        """–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        if not self.default_categories_file.exists():
            default_categories = [
                {
                    "name": "üí™ –≠–Ω–µ—Ä–≥–∏—è",
                    "type": "percent",
                    "emoji": "üí™",
                    "color": "#FF6B6B",
                    "description": "–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏",
                    "order": 1
                },
                {
                    "name": "üß† –§–æ–∫—É—Å",
                    "type": "scale_1_10",
                    "emoji": "üß†",
                    "color": "#4ECDC4",
                    "description": "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
                    "order": 2
                },
                {
                    "name": "üòå –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
                    "type": "scale_1_10",
                    "emoji": "üòå",
                    "color": "#FFD93D",
                    "description": "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
                    "order": 3
                },
                {
                    "name": "üõå –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞",
                    "type": "scale_1_10",
                    "emoji": "üõå",
                    "color": "#6C5CE7",
                    "description": "–ö–∞–∫ –≤—ã —Å–ø–∞–ª–∏ –ø—Ä–æ—à–ª–æ–π –Ω–æ—á—å—é",
                    "order": 4
                },
                {
                    "name": "üçΩÔ∏è –ü–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ",
                    "type": "text",
                    "emoji": "üçΩÔ∏è",
                    "color": "#00B894",
                    "description": "–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏—â–µ–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã",
                    "order": 5
                }
            ]

            try:
                with open(self.default_categories_file, 'w', encoding='utf-8') as f:
                    yaml.dump({"categories": default_categories}, f, allow_unicode=True, indent=2)
            except Exception as e:
                raise FileOperationError(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")

    def load_categories(self) -> List[StateCategory]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ, –ø–æ—Ç–æ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ)"""
        categories = []

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.user_categories_file.exists():
            try:
                with open(self.user_categories_file, 'r', encoding='utf-8') as f:
                    user_data = yaml.safe_load(f) or {}
                    user_categories = user_data.get('categories', [])
                    categories.extend([StateCategory(**cat) for cat in user_categories])
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        try:
            with open(self.default_categories_file, 'r', encoding='utf-8') as f:
                default_data = yaml.safe_load(f) or {}
                default_categories = default_data.get('categories', [])

                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_category_names = {cat.name for cat in categories}
                for cat_data in default_categories:
                    if cat_data['name'] not in user_category_names:
                        categories.append(StateCategory(**cat_data))

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É
        return sorted(categories, key=lambda x: x.order)

    def save_user_categories(self, categories: List[StateCategory]) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        try:
            data = {"categories": [cat.model_dump() for cat in categories]}  # –ò–°–ü–†–ê–í–õ–ï–ù–û: model_dump –≤–º–µ—Å—Ç–æ dict
            with open(self.user_categories_file, 'w', encoding='utf-8') as f:
                yaml.dump(data, f, allow_unicode=True, indent=2)
        except Exception as e:
            raise FileOperationError(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")

    @staticmethod
    def get_category_types() -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        return ["percent", "scale_1_10", "text", "yes_no"]


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
state_service = StateService()