import streamlit as st
from pathlib import Path
from datetime import date, timedelta
from utils.file_utils import load_json, save_json, copy_template, ensure_dir

DATA_DIR = Path("data")
DIARY_DIR = DATA_DIR / "diary"
TEMPLATE_DIR = Path("templates/daily_templates")

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
ensure_dir(DIARY_DIR)


def progress_bar(percent: int):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
    filled = "‚ñà" * (percent // 10)
    empty = "‚ñë" * (10 - percent // 10)
    return f"{filled}{empty} {percent}%"


def get_auto_categories():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–Ω—è"""
    return {
        "ü©∫ –ó–¥–æ—Ä–æ–≤—å–µ": ["ü©∫", "üöë", "üíä", "–≤—Ä–∞—á", "–±–æ–ª—å–Ω–∏—Ü", "–∑–¥–æ—Ä–æ–≤—å", "–Ω–µ–π—Ä–æ—Ö–∏—Ä—É—Ä–≥", "–ø—Ä–∏—ë–º", "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"],
        "üíº –†–∞–±–æ—Ç–∞": ["üì¶", "üíº", "üöö", "–∫—É—Ä—å–µ—Ä", "—Ä–∞–±–æ—Ç", "–¥–æ—Ö–æ–¥", "–∑–∞—Ä–∞–±–∞—Ç", "–ø—Ä–æ–µ–∫—Ç"],
        "üìö –û–±—É—á–µ–Ω–∏–µ": ["üìö", "üßÆ", "üìñ", "python", "–∏–∑—É—á–µ–Ω–∏–µ", "–ª–µ–∫—Ü–∏—è", "—á—Ç–µ–Ω–∏–µ", "–º–∞—Ä–∫ –ª—É—Ç—Ü", "–∫–ª–∞—Å—Å", "–∞—Ç—Ä–∏–±—É—Ç", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"],
        "üßò –ü—Ä–∞–∫—Ç–∏–∫–∏": ["üïâÔ∏è", "üßò", "‚òØÔ∏è", "–º–µ–¥–∏—Ç–∞—Ü", "–º–∞–Ω—Ç—Ä–∞", "—Ä–∞—Å—Ç—è–∂–∫–∞", "–¥–∞–æ—Å–∏–∑–º", "–¥—É—Ö–æ–≤–Ω", "–ø—Ä–∞–∫—Ç–∏–∫"],
        "üè† –ë—ã—Ç": ["üè†", "üõèÔ∏è", "‚òï", "üçΩÔ∏è", "üõÄ", "—É–±–æ—Ä–∫", "–∑–∞–≤—Ç—Ä–∞–∫", "—É–∂–∏–Ω", "—Å–±–æ—Ä", "–¥–æ–∫—É–º–µ–Ω—Ç", "–¥–æ–º"],
        "üé≠ –û—Ç–¥—ã—Ö": ["üì∫", "üé¨", "üö∂", "—Å–µ—Ä–∏–∞–ª", "–æ—Ç–¥—ã—Ö", "–ø—Ä–æ–≥—É–ª–∫–∞", "—Ä–∞–∑–≥–æ–≤–æ—Ä", "—Ö–æ–±–±–∏", "—Ä–∞–∑–≤–ª–µ—á–µ–Ω"]
    }


def get_all_categories():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    return [
        "ü©∫ –ó–¥–æ—Ä–æ–≤—å–µ", "üíº –†–∞–±–æ—Ç–∞", "üìö –û–±—É—á–µ–Ω–∏–µ",
        "üßò –ü—Ä–∞–∫—Ç–∏–∫–∏", "üè† –ë—ã—Ç", "üé≠ –û—Ç–¥—ã—Ö",
        "üë• –û–±—â–µ–Ω–∏–µ", "üíñ –û—Ç–Ω–æ—à–µ–Ω–∏—è", "üå± –†–∞–∑–≤–∏—Ç–∏–µ",
        "üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "üèÉ –°–ø–æ—Ä—Ç", "üôè –î—É—Ö–æ–≤–Ω–æ–µ",
        "üí∞ –§–∏–Ω–∞–Ω—Å—ã", "üöÄ –ü—Ä–æ–µ–∫—Ç—ã", "üåç –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"
    ]


def suggest_category(task_text):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —Ç–µ–∫—Å—Ç—É –∑–∞–¥–∞—á–∏"""
    if not task_text:
        return "üè† –ë—ã—Ç"

    task_lower = task_text.lower()
    auto_categories = get_auto_categories()

    for cat_name, keywords in auto_categories.items():
        if any(keyword in task_lower for keyword in keywords):
            return cat_name

    return "üè† –ë—ã—Ç"  # –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


def calc_category_progress_v2(data):
    """–ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —è–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á"""
    category_progress = {}

    for period in ["–£—Ç—Ä–æ", "–î–µ–Ω—å", "–í–µ—á–µ—Ä"]:
        if period in data and isinstance(data[period], list):
            for task in data[period]:
                if isinstance(task, dict) and '–∫–∞—Ç–µ–≥–æ—Ä–∏—è' in task and '–ø—Ä–æ–≥—Ä–µ—Å—Å' in task:
                    category = task['–∫–∞—Ç–µ–≥–æ—Ä–∏—è']
                    if category not in category_progress:
                        category_progress[category] = []
                    category_progress[category].append(task['–ø—Ä–æ–≥—Ä–µ—Å—Å'])

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    return {cat: round(sum(progress) / len(progress))
            for cat, progress in category_progress.items() if progress}


def calc_category_progress(data, keywords):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫"""
    values = []

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –¥–Ω—è
    standard_periods = ["–£—Ç—Ä–æ", "–î–µ–Ω—å", "–í–µ—á–µ—Ä"]

    for period_name in standard_periods:
        if period_name in data and isinstance(data[period_name], list):
            for task in data[period_name]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –∏–º–µ–µ—Ç –Ω—É–∂–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                if isinstance(task, dict) and '–∑–∞–¥–∞—á–∞' in task and '–ø—Ä–æ–≥—Ä–µ—Å—Å' in task:
                    task_text = task['–∑–∞–¥–∞—á–∞'].lower()
                    if any(word.lower() in task_text for word in keywords):
                        values.append(task['–ø—Ä–æ–≥—Ä–µ—Å—Å'])

    return round(sum(values) / len(values)) if values else 0


def load_day_data(selected_day):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–Ω—è —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –µ—Å–ª–∏ –Ω–µ—Ç + –º–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    day_file = DIARY_DIR / f"{selected_day}.json"

    if day_file.exists():
        data = load_json(day_file)
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
        if "–£—Ç—Ä–æ" not in data:
            data["–£—Ç—Ä–æ"] = []
        if "–î–µ–Ω—å" not in data:
            data["–î–µ–Ω—å"] = []
        if "–í–µ—á–µ—Ä" not in data:
            data["–í–µ—á–µ—Ä"] = []
        if "–°–æ—Å—Ç–æ—è–Ω–∏–µ" not in data:
            data["–°–æ—Å—Ç–æ—è–Ω–∏–µ"] = {}
        if "–ó–∞–º–µ—Ç–∫–∏" not in data:
            data["–ó–∞–º–µ—Ç–∫–∏"] = []

        # –ú–ò–ì–†–ê–¶–ò–Ø: –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫ —Å—Ç–∞—Ä—ã–º –∑–∞–¥–∞—á–∞–º
        for period in ["–£—Ç—Ä–æ", "–î–µ–Ω—å", "–í–µ—á–µ—Ä"]:
            if period in data and isinstance(data[period], list):
                for task in data[period]:
                    if "–∫–∞—Ç–µ–≥–æ—Ä–∏—è" not in task:
                        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á
                        task["–∫–∞—Ç–µ–≥–æ—Ä–∏—è"] = suggest_category(task.get("–∑–∞–¥–∞—á–∞", ""))

        return data
    else:
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        base_structure = {
            "–£—Ç—Ä–æ": [],
            "–î–µ–Ω—å": [],
            "–í–µ—á–µ—Ä": [],
            "–°–æ—Å—Ç–æ—è–Ω–∏–µ": {},
            "–ó–∞–º–µ—Ç–∫–∏": []
        }
        save_json(day_file, base_structure)
        return base_structure





def show_state_metrics(state_data):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è"""
    if not state_data or not isinstance(state_data, dict):
        return

    st.header("üí´ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ")

    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
    col1, col2, col3, col4, col5 = st.columns(5)

    metrics_config = [
        ("üí™ –¢–µ–ª–æ", col1),
        ("üßò –≠–Ω–µ—Ä–≥–∏—è", col2),
        ("üß† –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è", col3),
        ("üåø –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", col4),
        ("üí® –ü–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ", col5)
    ]

    for metric_name, col in metrics_config:
        with col:
            value = state_data.get(metric_name, "0%")
            # –£–±–∏—Ä–∞–µ–º % –¥–ª—è —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            numeric_value = value.replace('%', '') if isinstance(value, str) else value
            try:
                numeric_value = int(numeric_value)
                st.metric(metric_name, f"{numeric_value}%")
            except (ValueError, TypeError):
                st.metric(metric_name, value)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
    if "üå¶Ô∏è –§–∞–∫—Ç–æ—Ä –ø–æ–≥–æ–¥—ã" in state_data:
        st.info(f"**üå¶Ô∏è –§–∞–∫—Ç–æ—Ä:** {state_data['üå¶Ô∏è –§–∞–∫—Ç–æ—Ä –ø–æ–≥–æ–¥—ã']}")

    if "üí≠ –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ" in state_data:
        st.write(f"**üí≠ –û–±—â–µ–µ:** {state_data['üí≠ –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ']}")


def show_notes(notes_data):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –∏ –∏–Ω—Å–∞–π—Ç—ã"""
    if not notes_data or not isinstance(notes_data, list):
        return

    st.header("üìù –ó–∞–º–µ—Ç–∫–∏ –∏ –∏–Ω—Å–∞–π—Ç—ã")

    for i, note in enumerate(notes_data):
        if note.strip():  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –∑–∞–º–µ—Ç–∫–∏
            st.write(f"‚Ä¢ {note}")


def show_auto_analysis(day_data):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–Ω—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    st.header("üìä –ê–Ω–∞–ª–∏–∑ –¥–Ω—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")

    # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —è–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∑–∞–¥–∞—á
    explicit_categories = calc_category_progress_v2(day_data)

    if explicit_categories:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∑–∞–¥–∞—á
        summary_md = "| –ö–∞—Ç–µ–≥–æ—Ä–∏—è | –ü—Ä–æ–≥—Ä–µ—Å—Å | –°—Ç–∞—Ç—É—Å |\n|-----------|:---------:|:-------:|\n"

        for cat_name, avg in sorted(explicit_categories.items(), key=lambda x: x[1], reverse=True):
            if avg >= 90:
                status = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ"
            elif avg >= 70:
                status = "üü¢ –•–æ—Ä–æ—à–æ"
            elif avg >= 50:
                status = "üü° –í –ø—Ä–æ—Ü–µ—Å—Å–µ"
            else:
                status = "üî¥ –ù–∞—á–∞—Ç–æ"
            summary_md += f"| {cat_name} | {progress_bar(avg)} | {status} |\n"

        st.markdown(summary_md)
        st.caption("üí° –ù–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–¥–∞—á")

    else:
        # Fallback –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        auto_categories = get_auto_categories()
        summary_md = "| –ö–∞—Ç–µ–≥–æ—Ä–∏—è | –ü—Ä–æ–≥—Ä–µ—Å—Å | –°—Ç–∞—Ç—É—Å |\n|-----------|:---------:|:-------:|\n"

        active_categories = []

        for cat_name, cat_keywords in auto_categories.items():
            avg = calc_category_progress(day_data, cat_keywords)
            if avg > 0:  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
                active_categories.append((cat_name, avg))

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É (—É–±—ã–≤–∞–Ω–∏–µ)
        active_categories.sort(key=lambda x: x[1], reverse=True)

        for cat_name, avg in active_categories:
            if avg >= 90:
                status = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ"
            elif avg >= 70:
                status = "üü¢ –•–æ—Ä–æ—à–æ"
            elif avg >= 50:
                status = "üü° –í –ø—Ä–æ—Ü–µ—Å—Å–µ"
            else:
                status = "üî¥ –ù–∞—á–∞—Ç–æ"
            summary_md += f"| {cat_name} | {progress_bar(avg)} | {status} |\n"

        if active_categories:
            st.markdown(summary_md)
            st.caption("üí° –ù–∞ –æ—Å–Ω–æ–≤–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á")
        else:
            st.info("ü§î –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")


def show_tasks_compact(period_name, tasks, selected_day, day_data, day_file):
    """–ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ expander —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    period_icons = {"–£—Ç—Ä–æ": "üåÖ", "–î–µ–Ω—å": "üåû", "–í–µ—á–µ—Ä": "üåá"}
    icon = period_icons.get(period_name, "üìù")

    with st.expander(f"{icon} {period_name} ({len(tasks)} –∑–∞–¥–∞—á)", expanded=True):
        for i, task in enumerate(tasks):
            cols = st.columns([3, 2, 2, 2, 2, 1])

            with cols[0]:
                task["–∑–∞–¥–∞—á–∞"] = st.text_input(
                    "–ó–∞–¥–∞—á–∞", task["–∑–∞–¥–∞—á–∞"],
                    key=f"{selected_day}_{period_name}_{i}_task",
                    label_visibility="collapsed",
                    placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏..."
                )
            with cols[1]:
                task["–≤—Ä–µ–º—è"] = st.text_input(
                    "–í—Ä–µ–º—è", task["–≤—Ä–µ–º—è"],
                    key=f"{selected_day}_{period_name}_{i}_time",
                    label_visibility="collapsed",
                    placeholder="–í—Ä–µ–º—è..."
                )
            with cols[2]:
                # –ù–û–í–û–ï: –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏
                current_category = task.get("–∫–∞—Ç–µ–≥–æ—Ä–∏—è", "üè† –ë—ã—Ç")
                task["–∫–∞—Ç–µ–≥–æ—Ä–∏—è"] = st.selectbox(
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
                    get_all_categories(),
                    index=get_all_categories().index(
                        current_category) if current_category in get_all_categories() else 0,
                    key=f"{selected_day}_{period_name}_{i}_category",
                    label_visibility="collapsed"
                )
            with cols[3]:
                task["—Å—Ç–∞—Ç—É—Å"] = st.selectbox(
                    "–°—Ç–∞—Ç—É—Å", ["‚òê", "‚úÖ", "‚òëÔ∏è", "‚ùå"],
                    index=["‚òê", "‚úÖ", "‚òëÔ∏è", "‚ùå"].index(task["—Å—Ç–∞—Ç—É—Å"]),
                    key=f"{selected_day}_{period_name}_{i}_status",
                    label_visibility="collapsed"
                )
            with cols[4]:
                task["–ø—Ä–æ–≥—Ä–µ—Å—Å"] = st.slider(
                    "–ü—Ä–æ–≥—Ä–µ—Å—Å", 0, 100, task["–ø—Ä–æ–≥—Ä–µ—Å—Å"],
                    key=f"{selected_day}_{period_name}_{i}_progress",
                    label_visibility="collapsed"
                )
            with cols[5]:
                if st.button("‚ùå", key=f"{selected_day}_{period_name}_{i}_delete"):
                    tasks.pop(i)
                    save_json(day_file, day_data)
                    st.rerun()

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –≤ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥
        if st.button(f"‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ {period_name}", key=f"add_{period_name}", use_container_width=True):
            tasks.append({
                "–∑–∞–¥–∞—á–∞": "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
                "–≤—Ä–µ–º—è": "",
                "—Å—Ç–∞—Ç—É—Å": "‚òê",
                "–ø—Ä–æ–≥—Ä–µ—Å—Å": 0,
                "–∫–∞—Ç–µ–≥–æ—Ä–∏—è": "üè† –ë—ã—Ç"  # ‚Üê –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            })
            save_json(day_file, day_data)
            st.rerun()


def show_day_management(selected_day, day_data, day_file):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–º - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ç.–¥."""
    st.markdown("---")
    st.subheader("üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–º")

    col1, col2, col3 = st.columns([2, 1, 1])

    with col1:
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è", use_container_width=True, type="primary"):
            save_json(day_file, day_data)
            st.success("‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

    with col2:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", use_container_width=True):
            st.rerun()

    with col3:
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ
        if st.button("üìÖ –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å", use_container_width=True):
            tomorrow = date.today() + timedelta(days=1)
            tomorrow_file = DIARY_DIR / f"{tomorrow}.json"

            # –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            copied_data = {
                "–£—Ç—Ä–æ": [{"–∑–∞–¥–∞—á–∞": task["–∑–∞–¥–∞—á–∞"], "–≤—Ä–µ–º—è": task["–≤—Ä–µ–º—è"], "—Å—Ç–∞—Ç—É—Å": "‚òê", "–ø—Ä–æ–≥—Ä–µ—Å—Å": 0}
                         for task in day_data.get("–£—Ç—Ä–æ", [])],
                "–î–µ–Ω—å": [{"–∑–∞–¥–∞—á–∞": task["–∑–∞–¥–∞—á–∞"], "–≤—Ä–µ–º—è": task["–≤—Ä–µ–º—è"], "—Å—Ç–∞—Ç—É—Å": "‚òê", "–ø—Ä–æ–≥—Ä–µ—Å—Å": 0}
                         for task in day_data.get("–î–µ–Ω—å", [])],
                "–í–µ—á–µ—Ä": [{"–∑–∞–¥–∞—á–∞": task["–∑–∞–¥–∞—á–∞"], "–≤—Ä–µ–º—è": task["–≤—Ä–µ–º—è"], "—Å—Ç–∞—Ç—É—Å": "‚òê", "–ø—Ä–æ–≥—Ä–µ—Å—Å": 0}
                          for task in day_data.get("–í–µ—á–µ—Ä", [])],
                "–°–æ—Å—Ç–æ—è–Ω–∏–µ": {},
                "–ó–∞–º–µ—Ç–∫–∏": []
            }

            save_json(tomorrow_file, copied_data)
            st.success(f"üìÖ –î–µ–Ω—å –Ω–∞ {tomorrow} —Å–æ–∑–¥–∞–Ω –∫–∞–∫ –∫–æ–ø–∏—è!")


def show_state_and_notes_editor(day_data, day_file, selected_day):
    """–†–µ–¥–∞–∫—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∑–∞–º–µ—Ç–æ–∫"""
    with st.expander("üí´ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–º–µ—Ç–∫–∏", expanded=False):
        st.subheader("üí´ –°–æ—Å—Ç–æ—è–Ω–∏–µ")

        col1, col2 = st.columns(2)
        with col1:
            body = st.text_input("üí™ –¢–µ–ª–æ", value=day_data.get("–°–æ—Å—Ç–æ—è–Ω–∏–µ", {}).get("üí™ –¢–µ–ª–æ", ""),
                                 placeholder="–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–ª–∞...")
            energy = st.text_input("üßò –≠–Ω–µ—Ä–≥–∏—è", value=day_data.get("–°–æ—Å—Ç–æ—è–Ω–∏–µ", {}).get("üßò –≠–Ω–µ—Ä–≥–∏—è", ""),
                                   placeholder="–£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏...")
            digestion = st.text_input("üí® –ü–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ", value=day_data.get("–°–æ—Å—Ç–æ—è–Ω–∏–µ", {}).get("üí® –ü–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ", ""),
                                      placeholder="–ü–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ...")

        with col2:
            concentration = st.text_input("üß† –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è",
                                          value=day_data.get("–°–æ—Å—Ç–æ—è–Ω–∏–µ", {}).get("üß† –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è", ""),
                                          placeholder="–£—Ä–æ–≤–µ–Ω—å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏...")
            mood = st.text_input("üåø –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", value=day_data.get("–°–æ—Å—Ç–æ—è–Ω–∏–µ", {}).get("üåø –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", ""),
                                 placeholder="–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ...")
            weather_factor = st.text_input("üå¶Ô∏è –§–∞–∫—Ç–æ—Ä", value=day_data.get("–°–æ—Å—Ç–æ—è–Ω–∏–µ", {}).get("üå¶Ô∏è –§–∞–∫—Ç–æ—Ä –ø–æ–≥–æ–¥—ã", ""),
                                           placeholder="–í–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã...")

        st.subheader("üìù –ó–∞–º–µ—Ç–∫–∏")
        notes_text = st.text_area("–ó–∞–º–µ—Ç–∫–∏ –∏ –∏–Ω—Å–∞–π—Ç—ã –¥–Ω—è (–∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)",
                                  value="\n".join(day_data.get("–ó–∞–º–µ—Ç–∫–∏", [])) if day_data.get("–ó–∞–º–µ—Ç–∫–∏") else "",
                                  height=120,
                                  placeholder="–ó–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –º—ã—Å–ª–∏, –∏–Ω—Å–∞–π—Ç—ã, –Ω–∞–±–ª—é–¥–µ–Ω–∏—è...")

        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–º–µ—Ç–∫–∏", use_container_width=True):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            day_data["–°–æ—Å—Ç–æ—è–Ω–∏–µ"] = {
                "üí™ –¢–µ–ª–æ": body,
                "üßò –≠–Ω–µ—Ä–≥–∏—è": energy,
                "üí® –ü–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ": digestion,
                "üß† –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è": concentration,
                "üåø –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ": mood,
                "üå¶Ô∏è –§–∞–∫—Ç–æ—Ä –ø–æ–≥–æ–¥—ã": weather_factor
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫–∏
            if notes_text.strip():
                day_data["–ó–∞–º–µ—Ç–∫–∏"] = [note.strip() for note in notes_text.split('\n') if note.strip()]
            else:
                day_data["–ó–∞–º–µ—Ç–∫–∏"] = []

            save_json(day_file, day_data)
            st.success("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–º–µ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            st.rerun()


def show_diary_tab():
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–Ω—è–º–∏
    st.sidebar.header("üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–Ω—è–º–∏")

    # –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞
    st.sidebar.subheader("‚ö° –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø")
    col1, col2 = st.sidebar.columns(2)
    with col1:
        today_btn = st.button("üìù –°–µ–≥–æ–¥–Ω—è", use_container_width=True)
    with col2:
        tomorrow_btn = st.button("üöÄ –ó–∞–≤—Ç—Ä–∞", use_container_width=True)

    # –í—ã–±–æ—Ä –¥–Ω—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    st.sidebar.subheader("üîç –í—ã–±–æ—Ä –¥–Ω—è")

    # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –º–µ–∂–¥—É –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –∏ —Å–ø–∏—Å–∫–æ–º
    view_mode = st.sidebar.radio("–†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", ["üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", "üìã –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π"], horizontal=True)

    if view_mode == "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å":
        selected_date = st.sidebar.date_input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å", value=date.today(), label_visibility="collapsed")
        selected_day = selected_date.strftime("%Y-%m-%d")
    else:
        # –°—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º
        all_days = sorted([f.stem for f in DIARY_DIR.glob("*.json")], reverse=True)
        if all_days:
            selected_day = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å", all_days, key="day_selection",
                                                label_visibility="collapsed")
        else:
            selected_day = None

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫
    if today_btn:
        selected_day = date.today().strftime("%Y-%m-%d")
    if tomorrow_btn:
        selected_day = (date.today() + timedelta(days=1)).strftime("%Y-%m-%d")
        # –°–æ–∑–¥–∞–µ–º –¥–µ–Ω—å –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        tomorrow_file = DIARY_DIR / f"{selected_day}.json"
        if not tomorrow_file.exists():
            empty_template = {"–£—Ç—Ä–æ": [], "–î–µ–Ω—å": [], "–í–µ—á–µ—Ä": [], "–°–æ—Å—Ç–æ—è–Ω–∏–µ": {}, "–ó–∞–º–µ—Ç–∫–∏": []}
            save_json(tomorrow_file, empty_template)

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–Ω—è
    st.sidebar.subheader("üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–µ–Ω—å")

    daily_template_files = sorted(TEMPLATE_DIR.glob("*.json"))
    daily_template_names = [f.stem for f in daily_template_files]

    creation_type = st.sidebar.radio(
        "–¢–∏–ø –¥–Ω—è:",
        ["üìù –ü—É—Å—Ç–æ–π –¥–µ–Ω—å", "üéØ –ò–∑ —à–∞–±–ª–æ–Ω–∞"],
        key="day_creation_type"
    )

    new_day_name = st.sidebar.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è (YYYY-MM-DD)", placeholder="2025-10-15")

    if creation_type == "üéØ –ò–∑ —à–∞–±–ª–æ–Ω–∞":
        selected_daily_template = st.sidebar.selectbox(
            "–®–∞–±–ª–æ–Ω –¥–Ω—è",
            daily_template_names,
            key="daily_template"
        )

        if st.sidebar.button("üìÖ –°–æ–∑–¥–∞—Ç—å –∏–∑ —à–∞–±–ª–æ–Ω–∞", use_container_width=True) and new_day_name:
            template_file = TEMPLATE_DIR / f"{selected_daily_template}.json"
            new_day_file = DIARY_DIR / f"{new_day_name}.json"
            copy_template(template_file, new_day_file)
            st.sidebar.success(f"–î–µ–Ω—å '{new_day_name}' —Å–æ–∑–¥–∞–Ω –∏–∑ —à–∞–±–ª–æ–Ω–∞ '{selected_daily_template}'!")
            selected_day = new_day_name
            st.rerun()

    else:  # –ü—É—Å—Ç–æ–π –¥–µ–Ω—å
        if st.sidebar.button("üìÑ –°–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç–æ–π –¥–µ–Ω—å", use_container_width=True) and new_day_name:
            empty_template = {"–£—Ç—Ä–æ": [], "–î–µ–Ω—å": [], "–í–µ—á–µ—Ä": [], "–°–æ—Å—Ç–æ—è–Ω–∏–µ": {}, "–ó–∞–º–µ—Ç–∫–∏": []}
            new_day_file = DIARY_DIR / f"{new_day_name}.json"
            save_json(new_day_file, empty_template)
            st.sidebar.success(f"–ü—É—Å—Ç–æ–π –¥–µ–Ω—å '{new_day_name}' —Å–æ–∑–¥–∞–Ω!")
            selected_day = new_day_name
            st.rerun()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    st.sidebar.subheader("‚ûï –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏")
    if selected_day:
        period_select = st.sidebar.selectbox("–ü–µ—Ä–∏–æ–¥", ["–£—Ç—Ä–æ", "–î–µ–Ω—å", "–í–µ—á–µ—Ä"], key="new_task_period")
        task_name = st.sidebar.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏", key="new_task_name", placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏...")
        task_time = st.sidebar.text_input("–í—Ä–µ–º—è", key="new_task_time", placeholder="7:30-8:00")

        # –ë–õ–û–ö –í–´–ë–û–†–ê –ö–ê–¢–ï–ì–û–†–ò–ò - –ù–û–í–û–ï
        if task_name:
            st.sidebar.subheader("üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–¥–∞—á–∏")
            suggested_category = suggest_category(task_name)

            selected_category = st.sidebar.selectbox(
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
                get_all_categories(),
                index=get_all_categories().index(
                    suggested_category) if suggested_category in get_all_categories() else 0,
                key="task_category_select",
                label_visibility="collapsed"
            )
            st.sidebar.caption(f"–ê–≤—Ç–æ–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {suggested_category}")

            if st.sidebar.button("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", use_container_width=True) and task_name and selected_day:
                day_file = DIARY_DIR / f"{selected_day}.json"
                day_data = load_day_data(selected_day)

                if period_select not in day_data:
                    day_data[period_select] = []

                day_data[period_select].append({
                    "–∑–∞–¥–∞—á–∞": task_name,
                    "–≤—Ä–µ–º—è": task_time,
                    "—Å—Ç–∞—Ç—É—Å": "‚òê",
                    "–ø—Ä–æ–≥—Ä–µ—Å—Å": 0,
                    "–∫–∞—Ç–µ–≥–æ—Ä–∏—è": selected_category
                })
                save_json(day_file, day_data)
                st.sidebar.success("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                st.rerun()

        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å - —Ä–∞–±–æ—Ç–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–Ω–µ–º
        if selected_day:
            day_data = load_day_data(selected_day)
            day_file = DIARY_DIR / f"{selected_day}.json"

            st.header(f"üìÖ –î–µ–Ω—å: {selected_day}")

            show_tasks_compact("–£—Ç—Ä–æ", day_data["–£—Ç—Ä–æ"], selected_day, day_data, day_file)
            show_tasks_compact("–î–µ–Ω—å", day_data["–î–µ–Ω—å"], selected_day, day_data, day_file)
            show_tasks_compact("–í–µ—á–µ—Ä", day_data["–í–µ—á–µ—Ä"], selected_day, day_data, day_file)

            show_auto_analysis(day_data)

            if day_data.get("–°–æ—Å—Ç–æ—è–Ω–∏–µ"):
                show_state_metrics(day_data["–°–æ—Å—Ç–æ—è–Ω–∏–µ"])

            if day_data.get("–ó–∞–º–µ—Ç–∫–∏"):
                show_notes(day_data["–ó–∞–º–µ—Ç–∫–∏"])

            show_state_and_notes_editor(day_data, day_file, selected_day)

            show_day_management(selected_day, day_data, day_file)

        else:
            all_days = sorted([f.stem for f in DIARY_DIR.glob("*.json")], reverse=True)
            if not all_days:
                st.info("""
                ## üìÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫!

                –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
                - üìù –°–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å
                - üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–Ω–µ–π
                - ‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞–º–∏
                - ‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º –¥–Ω—è
                - üìä –í–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞–¥–∞—á
                - üí´ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ
                - üìù –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏ –∏ –∏–Ω—Å–∞–π—Ç—ã

                –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, —Å–æ–∑–¥–∞–π—Ç–µ –≤–∞—à –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏!
                """)
            else:
                st.info("üëà –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏")