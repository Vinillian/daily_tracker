import streamlit as st
from pathlib import Path
from datetime import date, timedelta
from utils.file_utils import load_json, save_json, copy_template, ensure_dir

DATA_DIR = Path("data")
DIARY_DIR = DATA_DIR / "diary"
TEMPLATE_DIR = Path("templates/daily_templates")

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
ensure_dir(DIARY_DIR)


def progress_bar(percent: int):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
    filled = "‚ñà" * (percent // 10)
    empty = "‚ñë" * (10 - percent // 10)
    return f"{filled}{empty} {percent}%"


def calc_category_progress(data, keywords):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    values = []
    for period in data.values():
        for task in period:
            if any(word.lower() in task['–∑–∞–¥–∞—á–∞'].lower() for word in keywords):
                values.append(task['–ø—Ä–æ–≥—Ä–µ—Å—Å'])
    return round(sum(values) / len(values)) if values else 0


def show_diary_tab():
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–Ω—è–º–∏
    st.sidebar.header("üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–Ω—è–º–∏")

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–Ω—è
    st.sidebar.subheader("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–µ–Ω—å")

    tomorrow = date.today() + timedelta(days=1)
    tomorrow_file = DIARY_DIR / f"{tomorrow}.json"

    daily_template_files = sorted(TEMPLATE_DIR.glob("*.json"))
    daily_template_names = [f.stem for f in daily_template_files]

    creation_type = st.sidebar.radio(
        "–¢–∏–ø –¥–Ω—è:",
        ["üìù –ü—É—Å—Ç–æ–π –¥–µ–Ω—å", "üéØ –ò–∑ —à–∞–±–ª–æ–Ω–∞"],
        key="day_creation_type"
    )

    if creation_type == "üéØ –ò–∑ —à–∞–±–ª–æ–Ω–∞":
        selected_daily_template = st.sidebar.selectbox(
            "–®–∞–±–ª–æ–Ω –¥–Ω—è",
            daily_template_names,
            key="daily_template"
        )

        if st.sidebar.button("üìÖ –°–æ–∑–¥–∞—Ç—å –∑–∞–≤—Ç—Ä–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞", use_container_width=True):
            template_file = TEMPLATE_DIR / f"{selected_daily_template}.json"
            copy_template(template_file, tomorrow_file)
            st.sidebar.success(f"–ó–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –Ω–∞ {tomorrow} —Å–æ–∑–¥–∞–Ω –∏–∑ —à–∞–±–ª–æ–Ω–∞ '{selected_daily_template}'!")
            st.rerun()

    else:  # –ü—É—Å—Ç–æ–π –¥–µ–Ω—å
        if st.sidebar.button("üìÑ –°–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç–æ–π –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å", use_container_width=True):
            empty_template = {"–£—Ç—Ä–æ": [], "–î–µ–Ω—å": [], "–í–µ—á–µ—Ä": []}
            save_json(tomorrow_file, empty_template)
            st.sidebar.success(f"–ü—É—Å—Ç–æ–π –¥–µ–Ω—å –Ω–∞ {tomorrow} —Å–æ–∑–¥–∞–Ω!")
            st.rerun()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    st.sidebar.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
    period_select = st.sidebar.selectbox("–ü–µ—Ä–∏–æ–¥", ["–£—Ç—Ä–æ", "–î–µ–Ω—å", "–í–µ—á–µ—Ä"], key="new_task_period")
    task_name = st.sidebar.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏", key="new_task_name")
    task_time = st.sidebar.text_input("–í—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä 7:30‚Äì8:00)", key="new_task_time")

    if st.sidebar.button("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", use_container_width=True) and task_name:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
        all_days = sorted([f.stem for f in DIARY_DIR.glob("*.json")], reverse=True)
        if all_days:
            selected_day = all_days[0]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
            day_file = DIARY_DIR / f"{selected_day}.json"
            day_data = load_json(day_file)

            if period_select not in day_data:
                day_data[period_select] = []

            day_data[period_select].append({
                "–∑–∞–¥–∞—á–∞": task_name,
                "–≤—Ä–µ–º—è": task_time,
                "—Å—Ç–∞—Ç—É—Å": "‚òê",
                "–ø—Ä–æ–≥—Ä–µ—Å—Å": 0
            })
            save_json(day_file, day_data)
            st.sidebar.success("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            st.rerun()

    # –í—ã–±–æ—Ä –¥–Ω—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    st.sidebar.subheader("–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–Ω–µ–π")
    all_days = sorted([f.stem for f in DIARY_DIR.glob("*.json")], reverse=True)

    if not all_days:
        st.sidebar.info("üìù –î–Ω–µ–π –ø–æ–∫–∞ –Ω–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å!")
        selected_day = None
    else:
        selected_day = st.sidebar.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å",
            all_days,
            key="day_selection"
        )

    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å - —Ä–∞–±–æ—Ç–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–Ω–µ–º
    if selected_day:
        day_file = DIARY_DIR / f"{selected_day}.json"
        day_data = load_json(day_file)

        st.header(f"üìÖ –î–µ–Ω—å: {selected_day}")

        # –ü–µ—Ä–∏–æ–¥—ã –¥–Ω—è —Å –∏–∫–æ–Ω–∫–∞–º–∏
        period_icons = {"–£—Ç—Ä–æ": "üåÖ", "–î–µ–Ω—å": "üåû", "–í–µ—á–µ—Ä": "üåá"}

        for period in ["–£—Ç—Ä–æ", "–î–µ–Ω—å", "–í–µ—á–µ—Ä"]:
            if period in day_data and day_data[period]:
                st.subheader(f"{period_icons[period]} {period} ({len(day_data[period])} –∑–∞–¥–∞—á)")

                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                for i, task in enumerate(day_data[period]):
                    cols = st.columns([4, 2, 2, 2, 1])

                    # –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
                    with cols[0]:
                        new_task = st.text_input(
                            "–ó–∞–¥–∞—á–∞",
                            value=task["–∑–∞–¥–∞—á–∞"],
                            key=f"{selected_day}_{period}_{i}_task"
                        )
                        task["–∑–∞–¥–∞—á–∞"] = new_task

                    # –í—Ä–µ–º—è
                    with cols[1]:
                        new_time = st.text_input(
                            "–í—Ä–µ–º—è",
                            value=task["–≤—Ä–µ–º—è"],
                            key=f"{selected_day}_{period}_{i}_time"
                        )
                        task["–≤—Ä–µ–º—è"] = new_time

                    # –°—Ç–∞—Ç—É—Å
                    with cols[2]:
                        task["—Å—Ç–∞—Ç—É—Å"] = st.selectbox(
                            "–°—Ç–∞—Ç—É—Å",
                            ["‚òê", "‚úÖ", "‚òëÔ∏è", "‚ùå"],
                            index=["‚òê", "‚úÖ", "‚òëÔ∏è", "‚ùå"].index(task["—Å—Ç–∞—Ç—É—Å"]),
                            key=f"{selected_day}_{period}_{i}_status"
                        )

                    # –ü—Ä–æ–≥—Ä–µ—Å—Å —Å –ø–æ–ª–∑—É–Ω–∫–æ–º
                    with cols[3]:
                        task["–ø—Ä–æ–≥—Ä–µ—Å—Å"] = st.slider(
                            "–ü—Ä–æ–≥—Ä–µ—Å—Å",
                            0, 100,
                            task["–ø—Ä–æ–≥—Ä–µ—Å—Å"],
                            key=f"{selected_day}_{period}_{i}_progress"
                        )

                    # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
                    with cols[4]:
                        if st.button("‚ùå", key=f"{selected_day}_{period}_{i}_delete"):
                            day_data[period].pop(i)
                            save_json(day_file, day_data)
                            st.rerun()

                st.markdown("---")

        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        save_json(day_file, day_data)

        # üìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–Ω—è
        st.header("üìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–Ω—è")

        categories = {
            "üíª –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (Hive/UI)": ["–∫–æ–¥", "—Ä–∞–±–æ—Ç–∞", "dev", "flutter", "android", "hive", "ui", "–¥–∏–∑–∞–π–Ω"],
            "üßò –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏": ["–º–µ–¥–∏—Ç–∞—Ü–∏—è", "—Ç–∞–π—Ü–∑–∏", "—Ü–∏-–≥—É–Ω", "–º–∞–Ω—Ç—Ä–∞", "–¥—ã—Ö–∞–Ω–∏–µ"],
            "üß† –ò–∑—É—á–µ–Ω–∏–µ / —á—Ç–µ–Ω–∏–µ": ["—á—Ç–µ–Ω–∏–µ", "–∏–∑—É—á–µ–Ω–∏–µ", "—à–±", "–¥–∞–æ", "–∫–Ω–∏–≥–∞"],
            "üçΩ –ë—ã—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ": ["–æ–±–µ–¥", "—É–∂–∏–Ω", "–∑–∞–≤—Ç—Ä–∞–∫", "–æ—Ç–¥—ã—Ö", "—Å–æ–Ω", "–±—ã—Ç"]
        }

        summary_md = "| –ü–æ—Ç–æ–∫ | –ü—Ä–æ–≥—Ä–µ—Å—Å | –û—Ü–µ–Ω–∫–∞ |\n|-------|:---------:|:------:|\n"

        for cat, keywords in categories.items():
            avg = calc_category_progress(day_data, keywords)
            status = "‚öôÔ∏è –í –ø—Ä–æ—Ü–µ—Å—Å–µ" if avg < 100 else "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ"
            summary_md += f"| {cat} | {progress_bar(avg)} | {status} |\n"

        st.markdown(summary_md)

    else:
        # –≠–∫—Ä–∞–Ω –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–Ω–µ–π
        if not all_days:
            st.info("""
            ## üìÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫!

            –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
            - üìù **–°–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è** –Ω–∞ –¥–µ–Ω—å
            - üéØ **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã** –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–Ω–µ–π
            - ‚úÖ **–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ** –∑–∞–¥–∞—á —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞–º–∏
            - ‚è∞ **–ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è** –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º –¥–Ω—è
            - üìä **–í–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É** –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞–¥–∞—á

            **–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, —Å–æ–∑–¥–∞–π—Ç–µ –≤–∞—à –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏!**
            """)
        else:
            st.info("üëà –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏")