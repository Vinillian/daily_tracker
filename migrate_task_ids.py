import json
from pathlib import Path
import uuid


def migrate_file(file_path: Path):
    """–î–æ–±–∞–≤–∏—Ç—å ID –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∑–∞–¥–∞—á–∞–º"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)

        changed = False
        for period in ['–£—Ç—Ä–æ', '–î–µ–Ω—å', '–í–µ—á–µ—Ä']:
            if period in data and isinstance(data[period], list):
                for task in data[period]:
                    if isinstance(task, dict) and 'id' not in task:
                        task['id'] = str(uuid.uuid4())
                        changed = True
                        print(f"  –î–æ–±–∞–≤–ª–µ–Ω ID –¥–ª—è –∑–∞–¥–∞—á–∏: {task.get('–∑–∞–¥–∞—á–∞', 'Unknown')}")

        if changed:
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            print(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω: {file_path}")
        else:
            print(f"‚úì –£–∂–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω: {file_path}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {file_path}: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é ID –∑–∞–¥–∞—á...")
    data_dir = Path("data/diary")

    if not data_dir.exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è data/diary –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    files = list(data_dir.glob("*.json"))
    if not files:
        print("‚ùå –§–∞–π–ª—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")

    for file_path in files:
        print(f"\nüîß –û–±—Ä–∞–±–æ—Ç–∫–∞: {file_path.name}")
        migrate_file(file_path)

    print(f"\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")


if __name__ == "__main__":
    main()