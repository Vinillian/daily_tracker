import streamlit as st
from typing import List, Callable, Optional
from models.diary import Task
from core.constants import CATEGORIES, TASK_STATUSES


class TaskComponents:
    """–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏"""

    @staticmethod
    def render_task_editor(
            task: Task,
            key_prefix: str,
            on_delete: Optional[Callable] = None,
            on_move_up: Optional[Callable] = None,
            on_move_down: Optional[Callable] = None,
            show_category: bool = True,
            show_move_buttons: bool = True
    ) -> Task:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏"""

        cols = st.columns([3, 2, 2, 2, 2, 1] if show_category else [3, 2, 2, 2, 1])
        col_index = 0

        with cols[col_index]:
            task.task = st.text_input("–ó–∞–¥–∞—á–∞", value=task.task, key=f"{key_prefix}_task")
        col_index += 1

        with cols[col_index]:
            task.time = st.text_input("–í—Ä–µ–º—è", value=task.time, key=f"{key_prefix}_time")
        col_index += 1

        if show_category:
            with cols[col_index]:
                task.category = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", CATEGORIES,
                                             index=CATEGORIES.index(
                                                 task.category) if task.category in CATEGORIES else 0,
                                             key=f"{key_prefix}_category")
            col_index += 1

        with cols[col_index]:
            task.status = st.selectbox("–°—Ç–∞—Ç—É—Å", TASK_STATUSES,
                                       index=TASK_STATUSES.index(task.status) if task.status in TASK_STATUSES else 0,
                                       key=f"{key_prefix}_status")
        col_index += 1

        with cols[col_index]:
            task.progress = st.slider("–ü—Ä–æ–≥—Ä–µ—Å—Å", 0, 100, task.progress, key=f"{key_prefix}_progress")
        col_index += 1

        with cols[col_index]:
            if on_delete and st.button("‚ùå", key=f"{key_prefix}_delete"):
                on_delete()

        return task

    @staticmethod
    def render_task_compact(task: Task) -> None:
        """–ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)"""
        progress_emoji = "üü¢" if task.–ø—Ä–æ–≥—Ä–µ—Å—Å == 100 else "üü°" if task.–ø—Ä–æ–≥—Ä–µ—Å—Å >= 50 else "üî¥"

        st.write(f"{progress_emoji} **{task.–∑–∞–¥–∞—á–∞}**")
        st.caption(f"‚è∞ {task.–≤—Ä–µ–º—è} | üè∑Ô∏è {task.–∫–∞—Ç–µ–≥–æ—Ä–∏—è} | üìä {task.–ø—Ä–æ–≥—Ä–µ—Å—Å}% | {task.—Å—Ç–∞—Ç—É—Å}")

    @staticmethod
    def render_new_task_form(period: str, on_add: Callable) -> None:
        """–§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        with st.form(key=f"new_task_form_{period}", clear_on_submit=True):
            col1, col2, col3 = st.columns([3, 2, 1])

            with col1:
                task_name = st.text_input(
                    "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
                    key=f"new_task_name_{period}",
                    placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏..."
                )

            with col2:
                task_time = st.text_input(
                    "–í—Ä–µ–º—è",
                    key=f"new_task_time_{period}",
                    placeholder="09:00‚Äì10:00"
                )

            with col3:
                st.markdown("")  # –û—Ç—Å—Ç—É–ø –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
                if st.form_submit_button("‚ûï –î–æ–±–∞–≤–∏—Ç—å", use_container_width=True):
                    if task_name.strip():
                        new_task = Task(
                            –∑–∞–¥–∞—á–∞=task_name.strip(),
                            –≤—Ä–µ–º—è=task_time.strip() or "09:00‚Äì10:00",
                            —Å—Ç–∞—Ç—É—Å="‚òê",
                            –ø—Ä–æ–≥—Ä–µ—Å—Å=0,
                            –∫–∞—Ç–µ–≥–æ—Ä–∏—è="üè† –ë—ã—Ç"
                        )
                        on_add(new_task)