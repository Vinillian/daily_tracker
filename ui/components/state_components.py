import streamlit as st
from typing import List
from models.state import StateCategory, DayState


class StateComponents:
    """–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º"""

    @staticmethod
    def render_state_editor(day_state: DayState, categories: List[StateCategory]) -> None:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""

        if not categories:
            st.info("üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return

        # –°–µ—Ç–∫–∞ 2 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è
        cols = st.columns(2)

        for i, category in enumerate(categories):
            with cols[i % 2]:  # –ß–µ—Ä–µ–¥—É–µ–º –∫–æ–ª–æ–Ω–∫–∏
                StateComponents._render_single_state_field(day_state, category)

    @staticmethod
    def _render_single_state_field(day_state: DayState, category: StateCategory) -> None:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–æ–ª—è –¥–ª—è –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""

        current_value = day_state.get_value(category.name) or ""

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏
        st.markdown(f"**{category.emoji} {category.name}**")

        if category.type == "percent":
            # –ü—Ä–æ—Ü–µ–Ω—Ç—ã —Å –ø–æ–ª–∑—É–Ω–∫–æ–º - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ "75%"
                if current_value and '%' in current_value:
                    clean_value = current_value.replace('%', '').strip()
                    default_value = int(clean_value) if clean_value.isdigit() else 50
                elif current_value and current_value.isdigit():
                    default_value = int(current_value)
                else:
                    default_value = 50
            except (ValueError, AttributeError):
                default_value = 50

            value = st.slider(
                f"–£—Ä–æ–≤–µ–Ω—å {category.name.lower()}",
                min_value=0,
                max_value=100,
                value=default_value,
                key=f"state_{category.name}",
                help=category.description
            )
            display_value = f"{value}%"
            st.caption(f"üéØ {value}%")

        elif category.type == "scale_1_10":
            # –®–∫–∞–ª–∞ 1-10 - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥
            try:
                if current_value:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ "5/10" –∏–ª–∏ "7"
                    if '/' in current_value:
                        clean_value = current_value.split('/')[0].strip()
                        # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                        clean_value = ''.join(c for c in clean_value if c.isdigit())
                        default_value = int(clean_value) if clean_value and 1 <= int(clean_value) <= 10 else 5
                    elif current_value.isdigit():
                        default_value = int(current_value)
                    else:
                        default_value = 5
                else:
                    default_value = 5
            except (ValueError, AttributeError):
                default_value = 5

            value = st.select_slider(
                f"–û—Ü–µ–Ω–∫–∞ {category.name.lower()}",
                options=list(range(1, 11)),
                value=default_value,
                key=f"state_{category.name}",
                help=category.description
            )
            # –í–∏–∑—É–∞–ª—å–Ω–∞—è —à–∫–∞–ª–∞
            emoji_scale = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü"]
            display_value = f"{emoji_scale[value - 1]} {value}/10"
            st.caption(display_value)

        elif category.type == "text":
            # –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
            value = st.text_input(
                f"–û–ø–∏—Å–∞–Ω–∏–µ {category.name.lower()}",
                value=current_value,
                key=f"state_{category.name}",
                placeholder="–û–ø–∏—à–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...",
                help=category.description
            )
            display_value = value

        elif category.type == "yes_no":
            # –î–∞/–ù–µ—Ç
            options = ["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]
            default_index = 0 if current_value == "‚úÖ –î–∞" else 1
            value = st.radio(
                f"{category.name}",
                options,
                index=default_index,
                key=f"state_{category.name}",
                horizontal=True,
                help=category.description
            )
            display_value = value

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        if value != current_value:
            day_state.set_value(category.name, display_value, category.type)

    @staticmethod
    def render_state_summary(day_state: DayState, categories: List[StateCategory]) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if not day_state.values:
            st.info("üìù –°–æ—Å—Ç–æ—è–Ω–∏–µ –µ—â–µ –Ω–µ –æ—Ü–µ–Ω–µ–Ω–æ")
            return

        st.subheader("üìä –°–≤–æ–¥–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è")

        summary_text = ""
        for category in categories:
            value = day_state.get_value(category.name)
            if value:
                summary_text += f"{category.emoji} **{category.name}:** {value}\n\n"

        if summary_text:
            st.markdown(summary_text)
        else:
            st.info("‚ÑπÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã—à–µ")

    @staticmethod
    def render_category_management() -> None:
        """UI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        from services.state_service import state_service

        st.subheader("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = state_service.load_categories()

        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤
        management_mode = st.radio(
            "–†–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            ["üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", "üì• –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ"],
            horizontal=True,
            key="category_management_mode_main"  # –ò–ó–ú–ï–ù–ò–õ–ò
        )

        if management_mode == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
            StateComponents._render_category_list(categories, state_service)
        elif management_mode == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
            StateComponents._render_add_category_form(state_service)
        else:
            StateComponents._render_quick_add_categories(state_service)

    @staticmethod
    def _render_category_list(categories: List[StateCategory], state_service) -> None:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

        if not categories:
            st.info("üìù –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é!")
            return

        st.markdown("#### –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")

        for i, category in enumerate(categories):
            with st.container():
                col1, col2, col3, col4, col5 = st.columns([1, 3, 2, 2, 2])

                with col1:
                    st.markdown(f"**{i + 1}.**")

                with col2:
                    st.markdown(f"{category.emoji} **{category.name}**")
                    if category.description:
                        st.caption(category.description)

                with col3:
                    type_display = {
                        "percent": "üìä –ü—Ä–æ—Ü–µ–Ω—Ç—ã",
                        "scale_1_10": "üî¢ –®–∫–∞–ª–∞ 1-10",
                        "text": "üìù –¢–µ–∫—Å—Ç",
                        "yes_no": "‚úÖ –î–∞/–ù–µ—Ç"
                    }
                    st.write(type_display.get(category.type, category.type))

                with col4:
                    # –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    if st.button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", key=f"edit_{category.name}", use_container_width=True):
                        st.session_state[f'editing_{category.name}'] = True

                with col5:
                    # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
                    is_default = hasattr(category, 'is_default') and category.is_default
                    if not is_default and st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_{category.name}",
                                                    use_container_width=True):
                        try:
                            state_service.delete_category(category.name)
                            st.success(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category.name}' —É–¥–∞–ª–µ–Ω–∞!")
                            st.rerun()
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")

                # –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if st.session_state.get(f'editing_{category.name}', False):
                    StateComponents._render_edit_category_form(category, state_service)

    @staticmethod
    def _render_edit_category_form(category: StateCategory, state_service) -> None:
        """–§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""

        st.markdown("---")
        st.markdown(f"##### ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {category.name}")

        with st.form(key=f"edit_form_{category.name}"):
            col1, col2 = st.columns(2)

            with col1:
                new_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ", value=category.name)
                new_emoji = st.text_input("–≠–º–æ–¥–∑–∏", value=category.emoji)
                new_color = st.color_picker("–¶–≤–µ—Ç", value=category.color)

            with col2:
                new_type = st.selectbox(
                    "–¢–∏–ø –≤–≤–æ–¥–∞",
                    state_service.get_category_types(),
                    index=state_service.get_category_types().index(category.type)
                )
                new_description = st.text_area(
                    "–û–ø–∏—Å–∞–Ω–∏–µ",
                    value=category.description,
                    placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏..."
                )
                new_order = st.number_input(
                    "–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                    min_value=1,
                    value=category.order
                )

            col1, col2 = st.columns(2)
            with col1:
                if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", use_container_width=True):
                    try:
                        updated_category = StateCategory(
                            name=new_name,
                            type=new_type,
                            emoji=new_emoji,
                            color=new_color,
                            description=new_description,
                            order=new_order
                        )
                        state_service.update_category(category.name, updated_category)
                        st.session_state[f'editing_{category.name}'] = False
                        st.success("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                        st.rerun()
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

            with col2:
                if st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞", use_container_width=True):
                    st.session_state[f'editing_{category.name}'] = False
                    st.rerun()

    @staticmethod
    def render_category_management() -> None:
        """UI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        from services.state_service import state_service

        st.subheader("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = state_service.load_categories()

        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤
        management_mode = st.radio(
            "–†–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            ["üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", "üì• –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ"],
            horizontal=True,
            key="category_management_mode"
        )

        if management_mode == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
            StateComponents._render_category_list(categories, state_service)
        elif management_mode == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
            StateComponents._render_add_category_form(state_service)
        else:
            StateComponents._render_quick_add_categories(state_service)

    @staticmethod
    def _render_add_category_form(state_service) -> None:
        """–§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""

        st.markdown("#### –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é")

        with st.form(key="add_category_form_main"):  # –ò–ó–ú–ï–ù–ò–õ–ò
            col1, col2 = st.columns(2)

            with col1:
                new_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –≠–Ω–µ—Ä–≥–∏—è")
                new_emoji = st.text_input("–≠–º–æ–¥–∑–∏ *", value="‚ö™", placeholder="‚ö°")
                new_color = st.color_picker("–¶–≤–µ—Ç *", value="#808080")

            with col2:
                new_type = st.selectbox(
                    "–¢–∏–ø –≤–≤–æ–¥–∞ *",
                    state_service.get_category_types()
                )
                new_description = st.text_area(
                    "–û–ø–∏—Å–∞–Ω–∏–µ",
                    placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏..."
                )
                new_order = st.number_input(
                    "–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                    min_value=1,
                    value=99
                )

            if st.form_submit_button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", use_container_width=True):
                if not new_name or not new_emoji:
                    st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–æ—Ç–º–µ—á–µ–Ω—ã *)")
                else:
                    try:
                        new_category = StateCategory(
                            name=new_name.strip(),
                            type=new_type,
                            emoji=new_emoji.strip(),
                            color=new_color,
                            description=new_description.strip(),
                            order=new_order
                        )
                        state_service.add_category(new_category)
                        st.success(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{new_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                        st.rerun()
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")

    @staticmethod
    def _render_quick_add_categories(state_service) -> None:
        """–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""

        st.markdown("#### üì• –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        additional_categories = state_service.load_additional_categories()
        current_categories = state_service.load_categories()

        # –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        current_category_names = {cat.name for cat in current_categories}
        available_categories = [cat for cat in additional_categories if cat.name not in current_category_names]

        if not available_categories:
            st.success("üéâ –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        for category in available_categories:
            col1, col2, col3 = st.columns([3, 2, 1])

            with col1:
                st.markdown(f"**{category.emoji} {category.name}**")
                st.caption(category.description)

            with col2:
                type_display = {
                    "percent": "üìä –ü—Ä–æ—Ü–µ–Ω—Ç—ã",
                    "scale_1_10": "üî¢ –®–∫–∞–ª–∞ 1-10",
                    "text": "üìù –¢–µ–∫—Å—Ç",
                    "yes_no": "‚úÖ –î–∞/–ù–µ—Ç"
                }
                st.write(type_display.get(category.type, category.type))

            with col3:
                if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å", key=f"quick_add_{category.name}", use_container_width=True):
                    try:
                        state_service.add_category(category)
                        st.success(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category.name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                        st.rerun()
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")