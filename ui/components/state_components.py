import streamlit as st
from typing import List, Dict
from models.state import StateCategory, DayState


class StateComponents:
    """–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º"""

    @staticmethod
    def render_state_editor(day_state: DayState, categories: List[StateCategory]) -> None:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""

        if not categories:
            st.info("üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return

        # –°–µ—Ç–∫–∞ 2 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è
        cols = st.columns(2)

        for i, category in enumerate(categories):
            with cols[i % 2]:  # –ß–µ—Ä–µ–¥—É–µ–º –∫–æ–ª–æ–Ω–∫–∏
                StateComponents._render_single_state_field(day_state, category)

    @staticmethod
    def _render_single_state_field(day_state: DayState, category: StateCategory) -> None:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–æ–ª—è –¥–ª—è –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""

        current_value = day_state.get_value(category.name) or ""

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏
        st.markdown(f"**{category.emoji} {category.name}**")

        if category.type == "percent":
            # –ü—Ä–æ—Ü–µ–Ω—Ç—ã —Å –ø–æ–ª–∑—É–Ω–∫–æ–º
            default_value = int(current_value) if current_value and current_value.replace('%', '').isdigit() else 50
            value = st.slider(
                category.description,
                min_value=0,
                max_value=100,
                value=default_value,
                key=f"state_{category.name}"
            )
            display_value = f"{value}%"
            st.caption(f"üéØ {value}%")

        elif category.type == "scale_1_10":
            # –®–∫–∞–ª–∞ 1-10
            default_value = int(current_value) if current_value and current_value.isdigit() and 1 <= int(
                current_value) <= 10 else 5
            value = st.select_slider(
                category.description,
                options=list(range(1, 11)),
                value=default_value,
                key=f"state_{category.name}"
            )
            # –í–∏–∑—É–∞–ª—å–Ω–∞—è —à–∫–∞–ª–∞
            emoji_scale = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü"]
            display_value = f"{emoji_scale[value - 1]} {value}/10"
            st.caption(display_value)

        elif category.type == "text":
            # –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
            value = st.text_input(
                category.description,
                value=current_value,
                key=f"state_{category.name}",
                placeholder="–û–ø–∏—à–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ..."
            )
            display_value = value

        elif category.type == "yes_no":
            # –î–∞/–ù–µ—Ç
            options = ["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]
            default_index = 0 if current_value == "‚úÖ –î–∞" else 1
            value = st.radio(
                category.description,
                options,
                index=default_index,
                key=f"state_{category.name}",
                horizontal=True
            )
            display_value = value

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        if value != current_value:
            day_state.set_value(category.name, display_value, category.type)

    @staticmethod
    def render_state_summary(day_state: DayState, categories: List[StateCategory]) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if not day_state.values:
            st.info("üìù –°–æ—Å—Ç–æ—è–Ω–∏–µ –µ—â–µ –Ω–µ –æ—Ü–µ–Ω–µ–Ω–æ")
            return

        st.subheader("üìä –°–≤–æ–¥–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è")

        summary_text = ""
        for category in categories:
            value = day_state.get_value(category.name)
            if value:
                summary_text += f"{category.emoji} **{category.name}:** {value}\n\n"

        if summary_text:
            st.markdown(summary_text)
        else:
            st.info("‚ÑπÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã—à–µ")