import streamlit as st
from datetime import date, timedelta
from typing import List, Optional
from core.constants import DAY_PERIODS, PERIOD_ICONS
from core.exceptions import DailyTrackerError
from services.diary_service import diary_service
from models.diary import Day, Task
from ui.components.task_components import TaskComponents
from ui.components.progress_components import ProgressComponents
from ui.components.time_components import TimeComponents
from core.constants import CATEGORIES, TASK_STATUSES
class DiaryTab:
    """–í–∫–ª–∞–¥–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫–∞"""

    def __init__(self):
        self.template_files = diary_service.template_dir.glob("*.json")
        self.template_names = sorted([f.stem for f in self.template_files])

    def render_sidebar(self) -> str:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        st.sidebar.header("üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–Ω—è–º–∏")

        # –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø
        st.sidebar.subheader("‚ö° –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø")
        col1, col2 = st.sidebar.columns(2)

        selected_day = None

        with col1:
            if st.button("üìù –°–µ–≥–æ–¥–Ω—è", use_container_width=True):
                selected_day = date.today().strftime("%Y-%m-%d")

        with col2:
            if st.button("üöÄ –ó–∞–≤—Ç—Ä–∞", use_container_width=True):
                selected_day = (date.today() + timedelta(days=1)).strftime("%Y-%m-%d")

        # –í—ã–±–æ—Ä –¥–Ω—è
        st.sidebar.subheader("üîç –í—ã–±–æ—Ä –¥–Ω—è")
        view_mode = st.sidebar.radio(
            "–†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            ["üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", "üìã –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π"],
            horizontal=True
        )

        if view_mode == "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å":
            selected_date = st.sidebar.date_input(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å",
                value=date.today(),
                label_visibility="collapsed"
            )
            selected_day = selected_date.strftime("%Y-%m-%d")
        else:
            all_days = diary_service.list_days()
            if all_days:
                selected_day = st.sidebar.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å",
                    all_days,
                    label_visibility="collapsed"
                )

        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–Ω—è
        self._render_day_creation()

        # –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        if selected_day:
            self._render_quick_task_add(selected_day)

        return selected_day

    def _render_day_creation(self) -> None:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è"""
        st.sidebar.subheader("üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–µ–Ω—å")

        creation_type = st.sidebar.radio(
            "–¢–∏–ø –¥–Ω—è:",
            ["üìù –ü—É—Å—Ç–æ–π –¥–µ–Ω—å", "üéØ –ò–∑ —à–∞–±–ª–æ–Ω–∞"],
            key="day_creation_type"
        )

        new_day_name = st.sidebar.text_input(
            "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è (YYYY-MM-DD)",
            placeholder="2025-10-15"
        )

        if creation_type == "üéØ –ò–∑ —à–∞–±–ª–æ–Ω–∞":
            selected_template = st.sidebar.selectbox(
                "–®–∞–±–ª–æ–Ω –¥–Ω—è",
                self.template_names,
                key="daily_template"
            )

            if st.sidebar.button("üìÖ –°–æ–∑–¥–∞—Ç—å –∏–∑ —à–∞–±–ª–æ–Ω–∞", use_container_width=True) and new_day_name:
                try:
                    # –°–æ–∑–¥–∞–µ–º –¥–µ–Ω—å –∏–∑ —à–∞–±–ª–æ–Ω–∞ –∏ —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                    day_data = diary_service.create_day(new_day_name, selected_template)
                    diary_service.save_day(new_day_name, day_data)
                    st.sidebar.success(f"–î–µ–Ω—å '{new_day_name}' —Å–æ–∑–¥–∞–Ω –∏–∑ —à–∞–±–ª–æ–Ω–∞ '{selected_template}'!")
                    st.rerun()
                except DailyTrackerError as e:
                    st.sidebar.error(f"–û—à–∏–±–∫–∞: {e}")

    def _render_quick_task_add(self, selected_day: str) -> None:
        """–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        st.sidebar.subheader("‚ûï –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏")

        period_select = st.sidebar.selectbox(
            "–ü–µ—Ä–∏–æ–¥",
            DAY_PERIODS,
            key="new_task_period_quick_add"  # –ò–ó–ú–ï–ù–ò–õ–ò
        )
        task_name = st.sidebar.text_input(
            "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
            key="new_task_name_quick_add",  # –ò–ó–ú–ï–ù–ò–õ–ò
            placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏..."
        )

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º
        task_time = TimeComponents.render_time_selector(key_suffix="quick_add_sidebar")  # –ò–ó–ú–ï–ù–ò–õ–ò

        category_select = st.sidebar.selectbox(
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
            CATEGORIES,
            key="new_task_category_quick_add"  # –ò–ó–ú–ï–ù–ò–õ–ò
        )

        if st.sidebar.button("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", use_container_width=True,
                             key="add_task_quick_sidebar") and task_name and selected_day:
            try:
                day_data = diary_service.load_day(selected_day)
                new_task = Task(  # ‚¨ÖÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç ID
                    –∑–∞–¥–∞—á–∞=task_name,
                    –≤—Ä–µ–º—è=task_time or self._suggest_next_time([], period_select),
                    —Å—Ç–∞—Ç—É—Å="‚òê",
                    –ø—Ä–æ–≥—Ä–µ—Å—Å=0,
                    –∫–∞—Ç–µ–≥–æ—Ä–∏—è=category_select
                )
                day_data.add_task(period_select, new_task)
                diary_service.save_day(selected_day, day_data)
                st.sidebar.success("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                st.rerun()
            except DailyTrackerError as e:
                st.sidebar.error(f"–û—à–∏–±–∫–∞: {e}")

    def render_day_content(self, selected_day: str) -> None:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–Ω—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–Ω—è –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
            if not diary_service.day_exists(selected_day):
                st.warning(f"üìÖ –î–µ–Ω—å '{selected_day}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                st.info("""
                **–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å:**
                1. –í –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É: `{selected_day}`
                2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–Ω—è (–ø—É—Å—Ç–æ–π –∏–ª–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞)  
                3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –¥–Ω—è
                """.format(selected_day=selected_day))
                return

            day_data = diary_service.load_day(selected_day)
            day_file = diary_service.data_dir / f"{selected_day}.json"

            st.header(f"üìÖ –î–µ–Ω—å: {selected_day}")

            # –ü–µ—Ä–∏–æ–¥—ã –¥–Ω—è
            for period in DAY_PERIODS:
                self._render_period_tasks(period, day_data, selected_day, day_file)

            # –ê–Ω–∞–ª–∏–∑
            self._render_day_analysis(day_data)

            # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–º–µ—Ç–∫–∏
            self._render_state_and_notes(day_data, selected_day, day_file)

            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–º
            self._render_day_management(selected_day, day_data, day_file)

        except DailyTrackerError as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–Ω—è: {e}")

    def _render_period_tasks(self, period: str, day_data: Day, selected_day: str, day_file: str) -> None:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–∞–¥–∞—á –ø–µ—Ä–∏–æ–¥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ID –≤–º–µ—Å—Ç–æ –∏–Ω–¥–µ–∫—Å–æ–≤"""
        tasks = day_data.get_tasks_by_period(period)

        if tasks is None:
            tasks = []

        icon = PERIOD_ICONS.get(period, "üìù")

        with st.expander(f"{icon} {period} ({len(tasks)} –∑–∞–¥–∞—á)", expanded=True):

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            sorted_tasks = self._sort_tasks_by_time(tasks)

            for display_index, task in enumerate(sorted_tasks):
                if task is None:
                    continue

                # ‚úÖ –°–û–ó–î–ê–ï–ú CALLBACK'–ò –° –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ú–ò ID
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–º—ã–∫–∞–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                def create_delete_callback(task_id=task.id):
                    def delete_task():
                        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –ø–æ ID
                        tasks[:] = [t for t in tasks if getattr(t, 'id', None) != task_id]
                        diary_service.save_day(selected_day, day_data)
                        st.rerun()

                    return delete_task

                def create_move_up_callback(task_id=task.id):
                    def move_up():
                        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∑–∞–¥–∞—á–∏ –ø–æ ID
                        for i, t in enumerate(tasks):
                            if getattr(t, 'id', None) == task_id:
                                if i > 0:
                                    # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–µ–π
                                    tasks[i], tasks[i - 1] = tasks[i - 1], tasks[i]
                                    diary_service.save_day(selected_day, day_data)
                                    st.rerun()
                                break

                    return move_up

                def create_move_down_callback(task_id=task.id):
                    def move_down():
                        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∑–∞–¥–∞—á–∏ –ø–æ ID
                        for i, t in enumerate(tasks):
                            if getattr(t, 'id', None) == task_id:
                                if i < len(tasks) - 1:
                                    # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Å–æ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ–π
                                    tasks[i], tasks[i + 1] = tasks[i + 1], tasks[i]
                                    diary_service.save_day(selected_day, day_data)
                                    st.rerun()
                                break

                    return move_down

                # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú ID –í –ö–õ–Æ–ß–ê–• –î–õ–Ø –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò
                TaskComponents.render_task_editor(
                    task=task,
                    key_prefix=f"{selected_day}_{period}_{task.id}",  # ‚¨ÖÔ∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á —Å ID
                    on_delete=create_delete_callback(),
                    on_move_up=create_move_up_callback(),
                    on_move_down=create_move_down_callback(),
                    show_category=True,
                    show_move_buttons=True
                )

            # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç ID)
            col1, col2 = st.columns([3, 1])
            with col1:
                if st.button(f"‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ {period}", key=f"add_{period}", use_container_width=True):
                    new_task = Task(
                        –∑–∞–¥–∞—á–∞="–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
                        –≤—Ä–µ–º—è=self._suggest_next_time(tasks, period),
                        —Å—Ç–∞—Ç—É—Å="‚òê",
                        –ø—Ä–æ–≥—Ä–µ—Å—Å=0,
                        –∫–∞—Ç–µ–≥–æ—Ä–∏—è="üè† –ë—ã—Ç"
                    )
                    tasks.append(new_task)
                    diary_service.save_day(selected_day, day_data)
                    st.rerun()

            with col2:
                if st.button(f"üïê –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏", key=f"sort_{period}", use_container_width=True):
                    self._sort_tasks_in_period(tasks)
                    diary_service.save_day(selected_day, day_data)
                    st.rerun()

    def _render_day_analysis(self, day_data: Day) -> None:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∞–Ω–∞–ª–∏–∑–∞ –¥–Ω—è"""
        st.header("üìä –ê–Ω–∞–ª–∏–∑ –¥–Ω—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        category_progress = day_data.calculate_category_progress()
        ProgressComponents.render_category_progress(category_progress)

    def _render_state_and_notes(self, day_data: Day, selected_day: str, day_file: str) -> None:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∑–∞–º–µ—Ç–æ–∫"""

        with st.expander("üí´ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–º–µ—Ç–∫–∏", expanded=False):

            # === –ë–õ–û–ö –°–û–°–¢–û–Ø–ù–ò–Ø ===
            col1, col2 = st.columns([3, 1])

            with col1:
                st.subheader("üí´ –°–æ—Å—Ç–æ—è–Ω–∏–µ")

            with col2:
                if st.button("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏", use_container_width=True):
                    st.session_state['managing_categories'] = not st.session_state.get('managing_categories', False)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ state —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not hasattr(day_data, 'state'):
                from models.state import DayState
                day_data.state = DayState()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            try:
                from services.state_service import state_service
                state_categories = state_service.load_categories()

                # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –º–µ–∂–¥—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –≤–≤–æ–¥–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
                if st.session_state.get('managing_categories', False):
                    from ui.components.state_components import StateComponents
                    StateComponents.render_category_management()
                else:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º
                    current_state_data = day_data.state.model_dump(by_alias=True) if hasattr(day_data.state,
                                                                                             'model_dump') else day_data.state.dict(
                        by_alias=True)

                    # –†–µ–Ω–¥–µ—Ä–∏–º —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    from ui.components.state_components import StateComponents
                    StateComponents.render_state_editor(day_data.state, state_categories)

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
                    StateComponents.render_state_summary(day_data.state, state_categories)

                    # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    new_state_data = day_data.state.model_dump(by_alias=True) if hasattr(day_data.state,
                                                                                         'model_dump') else day_data.state.dict(
                        by_alias=True)
                    if current_state_data != new_state_data:
                        try:
                            diary_service.save_day(selected_day, day_data)
                            st.success("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
                st.info("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

                # Fallback - –ø—Ä–æ—Å—Ç—ã–µ –ø–æ–ª—è
                col1, col2 = st.columns(2)
                with col1:
                    energy = st.slider("üí™ –≠–Ω–µ—Ä–≥–∏—è", 0, 100, 50)
                    focus = st.slider("üß† –§–æ–∫—É—Å", 0, 100, 50)
                with col2:
                    mood = st.slider("üòå –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", 0, 100, 50)
                    sleep = st.slider("üõå –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞", 0, 100, 50)
    def _render_day_management(self, selected_day: str, day_data: Day, day_file: str) -> None:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–Ω–µ–º"""
        st.markdown("---")
        st.subheader("üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–º")

        col1, col2, col3 = st.columns([2, 1, 1])

        with col1:
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è", use_container_width=True, type="primary"):
                try:
                    diary_service.save_day(selected_day, day_data)
                    st.success("‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                except DailyTrackerError as e:
                    st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

        with col2:
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", use_container_width=True):
                st.rerun()

        with col3:
            if st.button("üìÖ –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å", use_container_width=True):
                try:
                    tomorrow = (date.today() + timedelta(days=1)).strftime("%Y-%m-%d")
                    diary_service.copy_day(selected_day, tomorrow)
                    st.success(f"üìÖ –î–µ–Ω—å –Ω–∞ {tomorrow} —Å–æ–∑–¥–∞–Ω –∫–∞–∫ –∫–æ–ø–∏—è!")
                except DailyTrackerError as e:
                    st.error(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    def render_empty_state(self) -> None:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        st.info("""
        ## üìÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫!

        –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
        - üìù –°–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å
        - üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–Ω–µ–π  
        - ‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞–º–∏
        - ‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º –¥–Ω—è
        - üìä –í–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞–¥–∞—á
        - üí´ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ
        - üìù –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏ –∏ –∏–Ω—Å–∞–π—Ç—ã

        –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, —Å–æ–∑–¥–∞–π—Ç–µ –≤–∞—à –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏!
        """)

    def show_diary_tab(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏"""
        try:
            selected_day = self.render_sidebar()

            if selected_day:
                self.render_day_content(selected_day)
            else:
                if not diary_service.list_days():
                    self.render_empty_state()
                else:
                    st.info("üëà –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏")

        except Exception as e:
            st.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

    def _sort_tasks_by_time(self, tasks: List[Task]) -> List[Task]:
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
        return sorted(tasks, key=lambda task: self._get_task_start_time(task))

    def _get_task_start_time(self, task: Task) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
        start_time, _ = TimeComponents.parse_time_range(task.time)
        return start_time or "23:59"  # –ó–∞–¥–∞—á–∏ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–æ–Ω–µ—Ü

    def _sort_tasks_in_period(self, tasks: List[Task]) -> None:
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á –≤ –ø–µ—Ä–∏–æ–¥–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
        tasks.sort(key=lambda task: self._get_task_start_time(task))

    def _suggest_next_time(self, tasks: List[Task], period: str) -> str:
        """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        if not tasks:
            # –ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞ –≤ –ø–µ—Ä–∏–æ–¥–µ
            if period == "–£—Ç—Ä–æ":
                return "07:00-08:00"
            elif period == "–î–µ–Ω—å":
                return "12:00-13:00"
            else:
                return "18:00-19:00"

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–¥–∞—á—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        sorted_tasks = self._sort_tasks_by_time(tasks)
        last_task = sorted_tasks[-1]
        last_start, last_end = TimeComponents.parse_time_range(last_task.time)

        if last_end:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–¥–∞—á–∏
            try:
                # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ - –¥–æ–±–∞–≤–ª—è–µ–º 1 —á–∞—Å
                end_hour = int(last_end.split(':')[0])
                next_hour = (end_hour + 1) % 24
                return f"{last_end}-{next_hour:02d}:00"
            except:
                pass

        # Fallback
        return "09:00-10:00"


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
diary_tab = DiaryTab()