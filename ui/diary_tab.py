import streamlit as st
from datetime import date, timedelta
from typing import List, Optional
from core.constants import DAY_PERIODS, PERIOD_ICONS
from core.exceptions import DailyTrackerError
from services.diary_service import diary_service
from models.diary import Day, Task
from ui.components.task_components import TaskComponents
from ui.components.progress_components import ProgressComponents


class DiaryTab:
    """–í–∫–ª–∞–¥–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫–∞"""

    def __init__(self):
        self.template_files = diary_service.template_dir.glob("*.json")
        self.template_names = sorted([f.stem for f in self.template_files])

    def render_sidebar(self) -> str:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        st.sidebar.header("üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–Ω—è–º–∏")

        # –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø
        st.sidebar.subheader("‚ö° –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø")
        col1, col2 = st.sidebar.columns(2)

        selected_day = None

        with col1:
            if st.button("üìù –°–µ–≥–æ–¥–Ω—è", use_container_width=True):
                selected_day = date.today().strftime("%Y-%m-%d")

        with col2:
            if st.button("üöÄ –ó–∞–≤—Ç—Ä–∞", use_container_width=True):
                selected_day = (date.today() + timedelta(days=1)).strftime("%Y-%m-%d")

        # –í—ã–±–æ—Ä –¥–Ω—è
        st.sidebar.subheader("üîç –í—ã–±–æ—Ä –¥–Ω—è")
        view_mode = st.sidebar.radio(
            "–†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            ["üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", "üìã –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π"],
            horizontal=True
        )

        if view_mode == "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å":
            selected_date = st.sidebar.date_input(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å",
                value=date.today(),
                label_visibility="collapsed"
            )
            selected_day = selected_date.strftime("%Y-%m-%d")
        else:
            all_days = diary_service.list_days()
            if all_days:
                selected_day = st.sidebar.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å",
                    all_days,
                    label_visibility="collapsed"
                )

        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–Ω—è
        self._render_day_creation()

        # –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        if selected_day:
            self._render_quick_task_add(selected_day)

        return selected_day

    def _render_day_creation(self) -> None:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è"""
        st.sidebar.subheader("üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–µ–Ω—å")

        creation_type = st.sidebar.radio(
            "–¢–∏–ø –¥–Ω—è:",
            ["üìù –ü—É—Å—Ç–æ–π –¥–µ–Ω—å", "üéØ –ò–∑ —à–∞–±–ª–æ–Ω–∞"],
            key="day_creation_type"
        )

        new_day_name = st.sidebar.text_input(
            "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è (YYYY-MM-DD)",
            placeholder="2025-10-15"
        )

        if creation_type == "üéØ –ò–∑ —à–∞–±–ª–æ–Ω–∞":
            selected_template = st.sidebar.selectbox(
                "–®–∞–±–ª–æ–Ω –¥–Ω—è",
                self.template_names,
                key="daily_template"
            )

            if st.sidebar.button("üìÖ –°–æ–∑–¥–∞—Ç—å –∏–∑ —à–∞–±–ª–æ–Ω–∞", use_container_width=True) and new_day_name:
                try:
                    diary_service.create_day(new_day_name, selected_template)
                    st.sidebar.success(f"–î–µ–Ω—å '{new_day_name}' —Å–æ–∑–¥–∞–Ω –∏–∑ —à–∞–±–ª–æ–Ω–∞!")
                    st.rerun()
                except DailyTrackerError as e:
                    st.sidebar.error(f"–û—à–∏–±–∫–∞: {e}")
        else:
            if st.sidebar.button("üìÑ –°–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç–æ–π –¥–µ–Ω—å", use_container_width=True) and new_day_name:
                try:
                    diary_service.create_day(new_day_name)
                    diary_service.save_day(new_day_name, Day())
                    st.sidebar.success(f"–ü—É—Å—Ç–æ–π –¥–µ–Ω—å '{new_day_name}' —Å–æ–∑–¥–∞–Ω!")
                    st.rerun()
                except DailyTrackerError as e:
                    st.sidebar.error(f"–û—à–∏–±–∫–∞: {e}")

    def _render_quick_task_add(self, selected_day: str) -> None:
        """–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        st.sidebar.subheader("‚ûï –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏")

        period_select = st.sidebar.selectbox(
            "–ü–µ—Ä–∏–æ–¥",
            DAY_PERIODS,
            key="new_task_period"
        )
        task_name = st.sidebar.text_input(
            "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
            key="new_task_name",
            placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏..."
        )
        task_time = st.sidebar.text_input(
            "–í—Ä–µ–º—è",
            key="new_task_time",
            placeholder="09:00‚Äì10:00"
        )

        if st.sidebar.button("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", use_container_width=True) and task_name and selected_day:
            try:
                day_data = diary_service.load_day(selected_day)
                new_task = Task(
                    –∑–∞–¥–∞—á–∞=task_name,
                    –≤—Ä–µ–º—è=task_time or "09:00‚Äì10:00",
                    —Å—Ç–∞—Ç—É—Å="‚òê",
                    –ø—Ä–æ–≥—Ä–µ—Å—Å=0,
                    –∫–∞—Ç–µ–≥–æ—Ä–∏—è="üè† –ë—ã—Ç"
                )
                day_data.add_task(period_select, new_task)
                diary_service.save_day(selected_day, day_data)
                st.sidebar.success("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                st.rerun()
            except DailyTrackerError as e:
                st.sidebar.error(f"–û—à–∏–±–∫–∞: {e}")

    def render_day_content(self, selected_day: str) -> None:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–Ω—è"""
        try:
            day_data = diary_service.load_day(selected_day)
            day_file = diary_service.data_dir / f"{selected_day}.json"

            st.header(f"üìÖ –î–µ–Ω—å: {selected_day}")

            # –ü–µ—Ä–∏–æ–¥—ã –¥–Ω—è
            for period in DAY_PERIODS:
                self._render_period_tasks(period, day_data, selected_day, day_file)

            # –ê–Ω–∞–ª–∏–∑
            self._render_day_analysis(day_data)

            # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–º–µ—Ç–∫–∏
            self._render_state_and_notes(day_data, selected_day, day_file)

            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–º
            self._render_day_management(selected_day, day_data, day_file)

        except DailyTrackerError as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–Ω—è: {e}")

    def _render_period_tasks(self, period: str, day_data: Day, selected_day: str, day_file: str) -> None:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–∞–¥–∞—á –ø–µ—Ä–∏–æ–¥–∞"""
        tasks = day_data.get_tasks_by_period(period)
        icon = PERIOD_ICONS.get(period, "üìù")

        with st.expander(f"{icon} {period} ({len(tasks)} –∑–∞–¥–∞—á)", expanded=True):
            for i, task in enumerate(tasks):
                def create_delete_callback(idx, period_tasks):
                    def delete_task():
                        period_tasks.pop(idx)
                        diary_service.save_day(selected_day, day_data)
                        st.rerun()

                    return delete_task

                TaskComponents.render_task_editor(
                    task=task,
                    key_prefix=f"{selected_day}_{period}_{i}",
                    on_delete=create_delete_callback(i, tasks),
                    show_category=True
                )

            # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
            if st.button(f"‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ {period}", key=f"add_{period}", use_container_width=True):
                tasks.append(Task(
                    –∑–∞–¥–∞—á–∞="–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
                    –≤—Ä–µ–º—è="09:00‚Äì10:00",
                    —Å—Ç–∞—Ç—É—Å="‚òê",
                    –ø—Ä–æ–≥—Ä–µ—Å—Å=0,
                    –∫–∞—Ç–µ–≥–æ—Ä–∏—è="üè† –ë—ã—Ç"
                ))
                diary_service.save_day(selected_day, day_data)
                st.rerun()

    def _render_day_analysis(self, day_data: Day) -> None:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∞–Ω–∞–ª–∏–∑–∞ –¥–Ω—è"""
        st.header("üìä –ê–Ω–∞–ª–∏–∑ –¥–Ω—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        category_progress = day_data.calculate_category_progress()
        ProgressComponents.render_category_progress(category_progress)

    def _render_state_and_notes(self, day_data: Day, selected_day: str, day_file: str) -> None:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∑–∞–º–µ—Ç–æ–∫"""
        with st.expander("üí´ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–º–µ—Ç–∫–∏", expanded=False):
            st.subheader("üí´ –°–æ—Å—Ç–æ—è–Ω–∏–µ")

            col1, col2 = st.columns(2)
            with col1:
                body = st.text_input(
                    "üí™ –¢–µ–ª–æ",
                    value=day_data.—Å–æ—Å—Ç–æ—è–Ω–∏–µ.—Ç–µ–ª–æ,
                    placeholder="–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–ª–∞..."
                )
                energy = st.text_input(
                    "üßò –≠–Ω–µ—Ä–≥–∏—è",
                    value=day_data.—Å–æ—Å—Ç–æ—è–Ω–∏–µ.—ç–Ω–µ—Ä–≥–∏—è,
                    placeholder="–£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏..."
                )
                digestion = st.text_input(
                    "üí® –ü–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ",
                    value=day_data.—Å–æ—Å—Ç–æ—è–Ω–∏–µ.–ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ,
                    placeholder="–ü–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ..."
                )

            with col2:
                concentration = st.text_input(
                    "üß† –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è",
                    value=day_data.—Å–æ—Å—Ç–æ—è–Ω–∏–µ.–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è,
                    placeholder="–£—Ä–æ–≤–µ–Ω—å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏..."
                )
                mood = st.text_input(
                    "üåø –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
                    value=day_data.—Å–æ—Å—Ç–æ—è–Ω–∏–µ.–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ,
                    placeholder="–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ..."
                )
                weather_factor = st.text_input(
                    "üå¶Ô∏è –§–∞–∫—Ç–æ—Ä",
                    value=day_data.—Å–æ—Å—Ç–æ—è–Ω–∏–µ.—Ñ–∞–∫—Ç–æ—Ä_–ø–æ–≥–æ–¥—ã,
                    placeholder="–í–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã..."
                )

            st.subheader("üìù –ó–∞–º–µ—Ç–∫–∏")
            notes_text = st.text_area(
                "–ó–∞–º–µ—Ç–∫–∏ –∏ –∏–Ω—Å–∞–π—Ç—ã –¥–Ω—è (–∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)",
                value="\n".join(day_data.–∑–∞–º–µ—Ç–∫–∏) if day_data.–∑–∞–º–µ—Ç–∫–∏ else "",
                height=120,
                placeholder="–ó–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –º—ã—Å–ª–∏, –∏–Ω—Å–∞–π—Ç—ã, –Ω–∞–±–ª—é–¥–µ–Ω–∏—è..."
            )

            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–º–µ—Ç–∫–∏", use_container_width=True):
                try:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    day_data.—Å–æ—Å—Ç–æ—è–Ω–∏–µ.—Ç–µ–ª–æ = body
                    day_data.—Å–æ—Å—Ç–æ—è–Ω–∏–µ.—ç–Ω–µ—Ä–≥–∏—è = energy
                    day_data.—Å–æ—Å—Ç–æ—è–Ω–∏–µ.–ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ = digestion
                    day_data.—Å–æ—Å—Ç–æ—è–Ω–∏–µ.–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è = concentration
                    day_data.—Å–æ—Å—Ç–æ—è–Ω–∏–µ.–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ = mood
                    day_data.—Å–æ—Å—Ç–æ—è–Ω–∏–µ.—Ñ–∞–∫—Ç–æ—Ä_–ø–æ–≥–æ–¥—ã = weather_factor

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏
                    if notes_text.strip():
                        day_data.–∑–∞–º–µ—Ç–∫–∏ = [note.strip() for note in notes_text.split('\n') if note.strip()]
                    else:
                        day_data.–∑–∞–º–µ—Ç–∫–∏ = []

                    diary_service.save_day(selected_day, day_data)
                    st.success("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–º–µ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                    st.rerun()
                except DailyTrackerError as e:
                    st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    def _render_day_management(self, selected_day: str, day_data: Day, day_file: str) -> None:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–Ω–µ–º"""
        st.markdown("---")
        st.subheader("üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–º")

        col1, col2, col3 = st.columns([2, 1, 1])

        with col1:
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è", use_container_width=True, type="primary"):
                try:
                    diary_service.save_day(selected_day, day_data)
                    st.success("‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                except DailyTrackerError as e:
                    st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

        with col2:
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", use_container_width=True):
                st.rerun()

        with col3:
            if st.button("üìÖ –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å", use_container_width=True):
                try:
                    tomorrow = (date.today() + timedelta(days=1)).strftime("%Y-%m-%d")
                    diary_service.copy_day(selected_day, tomorrow)
                    st.success(f"üìÖ –î–µ–Ω—å –Ω–∞ {tomorrow} —Å–æ–∑–¥–∞–Ω –∫–∞–∫ –∫–æ–ø–∏—è!")
                except DailyTrackerError as e:
                    st.error(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    def render_empty_state(self) -> None:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        st.info("""
        ## üìÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫!

        –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
        - üìù –°–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å
        - üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–Ω–µ–π  
        - ‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞–º–∏
        - ‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º –¥–Ω—è
        - üìä –í–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞–¥–∞—á
        - üí´ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ
        - üìù –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏ –∏ –∏–Ω—Å–∞–π—Ç—ã

        –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, —Å–æ–∑–¥–∞–π—Ç–µ –≤–∞—à –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏!
        """)

    def show_diary_tab(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏"""
        try:
            selected_day = self.render_sidebar()

            if selected_day:
                self.render_day_content(selected_day)
            else:
                if not diary_service.list_days():
                    self.render_empty_state()
                else:
                    st.info("üëà –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏")

        except Exception as e:
            st.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
diary_tab = DiaryTab()