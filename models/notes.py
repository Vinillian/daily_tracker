from typing import List, Dict, Optional
from pydantic import Field
from datetime import datetime
from .base import SerializableModel


class Note(SerializableModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–º–µ—Ç–∫–∏"""
    text: str = Field(..., description="–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏")
    note_type: str = Field("üí° –û–±—ã—á–Ω–∞—è", description="–¢–∏–ø –∑–∞–º–µ—Ç–∫–∏")
    importance: str = Field("üü° –°—Ä–µ–¥–Ω—è—è", description="–í–∞–∂–Ω–æ—Å—Ç—å")
    time: str = Field(default_factory=lambda: datetime.now().strftime("%H:%M"))

    @classmethod
    def from_old_format(cls, text: str) -> 'Note':
        """–°–æ–∑–¥–∞—Ç—å –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (–ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞)"""
        return cls(text=text)


class NotesSection(SerializableModel):
    """–†–∞–∑–¥–µ–ª –∑–∞–º–µ—Ç–æ–∫"""
    notes: List[Note] = Field(default_factory=list)

    @classmethod
    def from_old_format(cls, old_notes: List[str]) -> 'NotesSection':
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""
        notes = [Note.from_old_format(text) for text in old_notes]
        return cls(notes=notes)

    def to_old_format(self) -> List[str]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return [note.text for note in self.notes]