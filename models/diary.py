from typing import List, Dict, Optional
from pydantic import Field, validator
from .base import SerializableModel
from core.validators import Validators


class Task(SerializableModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–¥–∞—á–∏"""
    –∑–∞–¥–∞—á–∞: str = Field(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
    –≤—Ä–µ–º—è: str = Field(..., description="–í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª")
    —Å—Ç–∞—Ç—É—Å: str = Field("‚òê", description="–°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    –ø—Ä–æ–≥—Ä–µ—Å—Å: int = Field(0, ge=0, le=100, description="–ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (0-100)")
    –∫–∞—Ç–µ–≥–æ—Ä–∏—è: str = Field("üè† –ë—ã—Ç", description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–¥–∞—á–∏")

    @validator('–∑–∞–¥–∞—á–∞')
    def validate_task_name(cls, v):
        if not v or not v.strip():
            raise ValueError('–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
        return v.strip()

    @validator('–ø—Ä–æ–≥—Ä–µ—Å—Å')
    def validate_progress(cls, v):
        if not 0 <= v <= 100:
            raise ValueError('–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100')
        return v


class DayState(SerializableModel):
    """–ú–æ–¥–µ–ª—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–Ω—è"""
    —Ç–µ–ª–æ: str = Field("", alias="üí™ –¢–µ–ª–æ")
    —ç–Ω–µ—Ä–≥–∏—è: str = Field("", alias="üßò –≠–Ω–µ—Ä–≥–∏—è")
    –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ: str = Field("", alias="üí® –ü–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ")
    –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è: str = Field("", alias="üß† –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è")
    –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: str = Field("", alias="üåø –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")
    —Ñ–∞–∫—Ç–æ—Ä_–ø–æ–≥–æ–¥—ã: str = Field("", alias="üå¶Ô∏è –§–∞–∫—Ç–æ—Ä –ø–æ–≥–æ–¥—ã")


class Day(SerializableModel):
    """–ú–æ–¥–µ–ª—å –¥–Ω—è"""
    —É—Ç—Ä–æ: List[Task] = Field(default_factory=list, alias="–£—Ç—Ä–æ")
    –¥–µ–Ω—å: List[Task] = Field(default_factory=list, alias="–î–µ–Ω—å")
    –≤–µ—á–µ—Ä: List[Task] = Field(default_factory=list, alias="–í–µ—á–µ—Ä")
    —Å–æ—Å—Ç–æ—è–Ω–∏–µ: DayState = Field(default_factory=DayState, alias="–°–æ—Å—Ç–æ—è–Ω–∏–µ")
    –∑–∞–º–µ—Ç–∫–∏: List[str] = Field(default_factory=list, alias="–ó–∞–º–µ—Ç–∫–∏")

    def get_tasks_by_period(self, period: str) -> List[Task]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –ø–µ—Ä–∏–æ–¥—É –¥–Ω—è"""
        period_map = {
            "–£—Ç—Ä–æ": self.—É—Ç—Ä–æ,
            "–î–µ–Ω—å": self.–¥–µ–Ω—å,
            "–í–µ—á–µ—Ä": self.–≤–µ—á–µ—Ä
        }
        return period_map.get(period, [])

    def add_task(self, period: str, task: Task) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –ø–µ—Ä–∏–æ–¥"""
        if period == "–£—Ç—Ä–æ":
            self.—É—Ç—Ä–æ.append(task)
        elif period == "–î–µ–Ω—å":
            self.–¥–µ–Ω—å.append(task)
        elif period == "–í–µ—á–µ—Ä":
            self.–≤–µ—á–µ—Ä.append(task)
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {period}")

    def calculate_category_progress(self) -> Dict[str, int]:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        category_progress = {}

        for period in [self.—É—Ç—Ä–æ, self.–¥–µ–Ω—å, self.–≤–µ—á–µ—Ä]:
            for task in period:
                if task.–∫–∞—Ç–µ–≥–æ—Ä–∏—è not in category_progress:
                    category_progress[task.–∫–∞—Ç–µ–≥–æ—Ä–∏—è] = []
                category_progress[task.–∫–∞—Ç–µ–≥–æ—Ä–∏—è].append(task.–ø—Ä–æ–≥—Ä–µ—Å—Å)

        return {
            cat: round(sum(progress) / len(progress))
            for cat, progress in category_progress.items() if progress
        }