from typing import List, Dict
from pydantic import Field, validator
from .base import SerializableModel
from models.state import DayState


class Task(SerializableModel):
    """Task model"""
    task: str = Field(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏", alias="–∑–∞–¥–∞—á–∞")
    time: str = Field(..., description="–í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª", alias="–≤—Ä–µ–º—è")
    status: str = Field("‚òê", description="–°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", alias="—Å—Ç–∞—Ç—É—Å")
    progress: int = Field(0, ge=0, le=100, description="–ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (0-100)", alias="–ø—Ä–æ–≥—Ä–µ—Å—Å")
    category: str = Field("üè† –ë—ã—Ç", description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–¥–∞—á–∏", alias="–∫–∞—Ç–µ–≥–æ—Ä–∏—è")

    @validator('task')
    def validate_task_name(cls, v):
        if not v or not v.strip():
            raise ValueError('–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
        return v.strip()

    @validator('progress')
    def validate_progress(cls, v):
        if not 0 <= v <= 100:
            raise ValueError('–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100')
        return v


class Day(SerializableModel):
    """Day model"""
    morning: List[Task] = Field(default_factory=list, alias="–£—Ç—Ä–æ")
    day: List[Task] = Field(default_factory=list, alias="–î–µ–Ω—å")
    evening: List[Task] = Field(default_factory=list, alias="–í–µ—á–µ—Ä")
    state: DayState = Field(default_factory=DayState, alias="–°–æ—Å—Ç–æ—è–Ω–∏–µ")  # –ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–º—è + alias
    notes: List[str] = Field(default_factory=list, alias="–ó–∞–º–µ—Ç–∫–∏")  # –ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –∏–º—è + alias

    def get_tasks_by_period(self, period: str) -> List[Task]:
        """Get tasks by day period"""
        period_map = {
            "–£—Ç—Ä–æ": self.morning,
            "–î–µ–Ω—å": self.day,
            "–í–µ—á–µ—Ä": self.evening
        }
        return period_map.get(period, [])

    def add_task(self, period: str, task: Task) -> None:
        """Add task to period"""
        if period == "–£—Ç—Ä–æ":
            self.morning.append(task)
        elif period == "–î–µ–Ω—å":
            self.day.append(task)
        elif period == "–í–µ—á–µ—Ä":
            self.evening.append(task)
        else:
            raise ValueError(f"Unknown period: {period}")

    def calculate_category_progress(self) -> Dict[str, int]:
        """Calculate progress by categories"""
        category_progress = {}

        for period in [self.morning, self.day, self.evening]:
            for task in period:
                if task.category not in category_progress:
                    category_progress[task.category] = []
                category_progress[task.category].append(task.progress)

        return {
            cat: round(sum(progress) / len(progress))
            for cat, progress in category_progress.items() if progress
        }